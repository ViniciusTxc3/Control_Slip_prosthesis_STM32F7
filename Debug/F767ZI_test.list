
F767ZI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a36c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a564  0800a564  0001a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c4  0800a5c4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c4  0800a5c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5cc  0800a5cc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d0  0800a5d0  0001a5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  20000200  0800a7d4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001578  0800a7d4  00021578  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ff2  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b50  00000000  00000000  00044220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00048d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  0004a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d02f  00000000  00000000  0004bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0f4  00000000  00000000  00078c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001058c5  00000000  00000000  00096d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019c610  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006610  00000000  00000000  0019c664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000200 	.word	0x20000200
 8000214:	00000000 	.word	0x00000000
 8000218:	0800a54c 	.word	0x0800a54c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000204 	.word	0x20000204
 8000234:	0800a54c 	.word	0x0800a54c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd1b 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f828 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fa1c 	bl	8000978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f9ea 	bl	8000918 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000544:	f000 f940 	bl	80007c8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000548:	f000 f8c2 	bl	80006d0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800054c:	f008 fd7e 	bl	800904c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000550:	f000 f98e 	bl	8000870 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // app_init(); // Funções de inicialização na pasta app para não misturar

  usb_send_buffer[0] = PKG_ST;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <main+0x4c>)
 8000556:	2224      	movs	r2, #36	; 0x24
 8000558:	701a      	strb	r2, [r3, #0]
  usb_send_buffer[1] = PKG_ET;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0x4c>)
 800055c:	2221      	movs	r2, #33	; 0x21
 800055e:	705a      	strb	r2, [r3, #1]

  // stop the timer
  HAL_TIM_Base_Stop_IT(&htim2);
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <main+0x50>)
 8000562:	f004 f953 	bl	800480c <HAL_TIM_Base_Stop_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (usb_command_received == 1)
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <main+0x54>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1fb      	bne.n	8000566 <main+0x36>
    {
      usb_command_received = 0;                  // reset the usb command received
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <main+0x54>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
      bebionic_process_commands(usb_rcv_buffer); // pass the usb buffer to be processed
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0x58>)
 8000576:	f009 fb79 	bl	8009c6c <bebionic_process_commands>
    if (usb_command_received == 1)
 800057a:	e7f4      	b.n	8000566 <main+0x36>
 800057c:	200002cc 	.word	0x200002cc
 8000580:	20000370 	.word	0x20000370
 8000584:	200003bc 	.word	0x200003bc
 8000588:	200002d4 	.word	0x200002d4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b8      	sub	sp, #224	; 0xe0
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f009 ff06 	bl	800a3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2290      	movs	r2, #144	; 0x90
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f009 fef7 	bl	800a3ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005be:	f002 feb9 	bl	8003334 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <SystemClock_Config+0x138>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a3f      	ldr	r2, [pc, #252]	; (80006c4 <SystemClock_Config+0x138>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <SystemClock_Config+0x138>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <SystemClock_Config+0x13c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e2:	4a39      	ldr	r2, [pc, #228]	; (80006c8 <SystemClock_Config+0x13c>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <SystemClock_Config+0x13c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000600:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000612:	2304      	movs	r3, #4
 8000614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000618:	23d8      	movs	r3, #216	; 0xd8
 800061a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000624:	2309      	movs	r3, #9
 8000626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fedd 	bl	80033f4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000640:	f000 fa9a 	bl	8000b78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000644:	f002 fe86 	bl	8003354 <HAL_PWREx_EnableOverDrive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064e:	f000 fa93 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000674:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000678:	2103      	movs	r1, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f968 	bl	8003950 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000686:	f000 fa77 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <SystemClock_Config+0x140>)
 800068c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800068e:	2300      	movs	r3, #0
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fbbd 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x120>
  {
    Error_Handler();
 80006a8:	f000 fa66 	bl	8000b78 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLCLK, RCC_MCODIV_5);
 80006ac:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80006b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006b4:	2001      	movs	r0, #1
 80006b6:	f003 fa37 	bl	8003b28 <HAL_RCC_MCOConfig>
}
 80006ba:	bf00      	nop
 80006bc:	37e0      	adds	r7, #224	; 0xe0
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000
 80006cc:	00200100 	.word	0x00200100

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <MX_ADC1_Init+0xec>)
 80006e4:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <MX_ADC1_Init+0xf0>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <MX_ADC1_Init+0xec>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_ADC1_Init+0xec>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_ADC1_Init+0xec>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_ADC1_Init+0xec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_ADC1_Init+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_ADC1_Init+0xec>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC1_Init+0xec>)
 8000710:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <MX_ADC1_Init+0xf4>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC1_Init+0xec>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_ADC1_Init+0xec>)
 800071c:	2204      	movs	r2, #4
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC1_Init+0xec>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC1_Init+0xec>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_ADC1_Init+0xec>)
 8000730:	f000 fc9e 	bl	8001070 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fa1d 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800073e:	2303      	movs	r3, #3
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000746:	2301      	movs	r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <MX_ADC1_Init+0xec>)
 8000750:	f000 fe6c 	bl	800142c <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fa0d 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800075e:	2307      	movs	r3, #7
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000762:	2302      	movs	r3, #2
 8000764:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <MX_ADC1_Init+0xec>)
 800076c:	f000 fe5e 	bl	800142c <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000776:	f000 f9ff 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800077a:	230a      	movs	r3, #10
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800077e:	2303      	movs	r3, #3
 8000780:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC1_Init+0xec>)
 8000788:	f000 fe50 	bl	800142c <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000792:	f000 f9f1 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000796:	230d      	movs	r3, #13
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800079a:	2304      	movs	r3, #4
 800079c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0xec>)
 80007a4:	f000 fe42 	bl	800142c <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007ae:	f000 f9e3 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002dc 	.word	0x200002dc
 80007c0:	40012000 	.word	0x40012000
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <MX_TIM1_Init+0xa4>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54000-1;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007ee:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 80007f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2-1;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000814:	f003 ff2a 	bl	800466c <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f9ab 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000830:	f004 fa26 	bl	8004c80 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800083a:	f000 f99d 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000850:	f004 fd68 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800085a:	f000 f98d 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000324 	.word	0x20000324
 800086c:	40010000 	.word	0x40010000

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_TIM2_Init+0xa4>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000894:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_TIM2_Init+0xa4>)
 8000898:	228f      	movs	r2, #143	; 0x8f
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM2_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80008a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008b8:	f003 ffd7 	bl	800486a <HAL_TIM_IC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008c2:	f000 f959 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008d6:	f004 fd25 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008e0:	f000 f94a 	bl	8000b78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_TIM2_Init+0xa4>)
 80008fc:	f004 f92b 	bl	8004b56 <HAL_TIM_IC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000906:	f000 f937 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000370 	.word	0x20000370

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f004 fd8e 	bl	800547c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f907 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000248 	.word	0x20000248
 8000974:	40004800 	.word	0x40004800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b72      	ldr	r3, [pc, #456]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a71      	ldr	r2, [pc, #452]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b6f      	ldr	r3, [pc, #444]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a6b      	ldr	r2, [pc, #428]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a65      	ldr	r2, [pc, #404]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b63      	ldr	r3, [pc, #396]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a5f      	ldr	r2, [pc, #380]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a59      	ldr	r2, [pc, #356]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b57      	ldr	r3, [pc, #348]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a06:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b51      	ldr	r3, [pc, #324]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	4b4e      	ldr	r3, [pc, #312]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	; (8000b58 <MX_GPIO_Init+0x1e0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_ARD_GPIO_Port, USER_LED_ARD_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4848      	ldr	r0, [pc, #288]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a3c:	f001 fa8a 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_GREEn_Pin|USER_LED_RED_Pin|USER_LED_BLUE_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a46:	4846      	ldr	r0, [pc, #280]	; (8000b60 <MX_GPIO_Init+0x1e8>)
 8000a48:	f001 fa84 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FFC5_C1_Pin|FFC5_C4_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a52:	4844      	ldr	r0, [pc, #272]	; (8000b64 <MX_GPIO_Init+0x1ec>)
 8000a54:	f001 fa7e 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FFC5_C2_Pin|FFC5_C3_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000a5e:	4842      	ldr	r0, [pc, #264]	; (8000b68 <MX_GPIO_Init+0x1f0>)
 8000a60:	f001 fa78 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BB_ChA_Pin|BB_ChB_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a6a:	4840      	ldr	r0, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x1f4>)
 8000a6c:	f001 fa72 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_SW_Pin */
  GPIO_InitStruct.Pin = USER_SW_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	4b3e      	ldr	r3, [pc, #248]	; (8000b70 <MX_GPIO_Init+0x1f8>)
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_SW_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	483b      	ldr	r0, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x1fc>)
 8000a86:	f001 f8b9 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_ARD_Pin */
  GPIO_InitStruct.Pin = USER_LED_ARD_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USER_LED_ARD_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	482e      	ldr	r0, [pc, #184]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000aa2:	f001 f8ab 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_GREEn_Pin USER_LED_RED_Pin USER_LED_BLUE_Pin */
  GPIO_InitStruct.Pin = USER_LED_GREEn_Pin|USER_LED_RED_Pin|USER_LED_BLUE_Pin;
 8000aa6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4828      	ldr	r0, [pc, #160]	; (8000b60 <MX_GPIO_Init+0x1e8>)
 8000ac0:	f001 f89c 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FFC5_C1_Pin FFC5_C4_Pin */
  GPIO_InitStruct.Pin = FFC5_C1_Pin|FFC5_C4_Pin;
 8000ac4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <MX_GPIO_Init+0x1ec>)
 8000ade:	f001 f88d 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FFC5_C2_Pin FFC5_C3_Pin */
  GPIO_InitStruct.Pin = FFC5_C2_Pin|FFC5_C3_Pin;
 8000ae2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	481b      	ldr	r0, [pc, #108]	; (8000b68 <MX_GPIO_Init+0x1f0>)
 8000afc:	f001 f87e 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BB_ChA_Pin BB_ChB_Pin */
  GPIO_InitStruct.Pin = BB_ChA_Pin|BB_ChB_Pin;
 8000b00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MX_GPIO_Init+0x1f4>)
 8000b1a:	f001 f86f 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <MX_GPIO_Init+0x1fc>)
 8000b3c:	f001 f85e 	bl	8001bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f000 ff90 	bl	8001a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f000 ffa9 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	10210000 	.word	0x10210000
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <HAL_ADC_MspInit+0xa4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d13b      	bne.n	8000c66 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_ADC_MspInit+0xa8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c36:	2309      	movs	r3, #9
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_ADC_MspInit+0xac>)
 8000c4a:	f000 ffd7 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8000c4e:	238a      	movs	r3, #138	; 0x8a
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <HAL_ADC_MspInit+0xb0>)
 8000c62:	f000 ffcb 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012000 	.word	0x40012000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_TIM_Base_MspInit+0x44>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d113      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2102      	movs	r1, #2
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 fedb 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f000 fef4 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cec:	d127      	bne.n	8000d3e <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_IC_MspInit+0x7c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <HAL_TIM_IC_MspInit+0x80>)
 8000d3a:	f000 ff5f 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d130      	bne.n	8000dd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a1a      	ldr	r2, [pc, #104]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db4:	2307      	movs	r3, #7
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000dc0:	f000 ff1c 	bl	8001bfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	2027      	movs	r0, #39	; 0x27
 8000dca:	f000 fe4e 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dce:	2027      	movs	r0, #39	; 0x27
 8000dd0:	f000 fe67 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f8d8 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //extern void app_tick_1ms(void); // Avisa que tem uma função protópipo externa
  app_tick_1ms(); // Realiza interrupção de 1 em 1 ms
 8000e38:	f008 fe70 	bl	8009b1c <app_tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e46:	f003 fd67 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000324 	.word	0x20000324

08000e54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART3_IRQHandler+0x10>)
 8000e5a:	f004 fb5d 	bl	8005518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000248 	.word	0x20000248

08000e68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e70:	f001 f88a 	bl	8001f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <OTG_FS_IRQHandler+0x10>)
 8000e7e:	f001 f9e1 	bl	8002244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001064 	.word	0x20001064

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f009 fa3c 	bl	800a338 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20080000 	.word	0x20080000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000021c 	.word	0x2000021c
 8000ef4:	20001578 	.word	0x20001578

08000ef8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f009 f9fb 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff faef 	bl	8000530 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8000f60:	0800a5d4 	.word	0x0800a5d4
  ldr r2, =_sbss
 8000f64:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000f68:	20001578 	.word	0x20001578

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>

08000f6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f72:	2003      	movs	r0, #3
 8000f74:	f000 fd6e 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f000 f805 	bl	8000f88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7e:	f7ff fe01 	bl	8000b84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fd89 	bl	8001abe <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 fd51 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	200003c0 	.word	0x200003c0

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200003c0 	.word	0x200003c0

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e031      	b.n	80010ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd9c 	bl	8000bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_ADC_Init+0x84>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	f043 0202 	orr.w	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fafe 	bl	80016c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	ffffeefd 	.word	0xffffeefd

080010f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_ADC_Start+0x1a>
 800110e:	2302      	movs	r3, #2
 8001110:	e0ad      	b.n	800126e <HAL_ADC_Start+0x176>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	d018      	beq.n	800115a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_ADC_Start+0x184>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_ADC_Start+0x188>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0c9a      	lsrs	r2, r3, #18
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800114c:	e002      	b.n	8001154 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3b01      	subs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f9      	bne.n	800114e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d175      	bne.n	8001254 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <HAL_ADC_Start+0x18c>)
 800116e:	4013      	ands	r3, r2
 8001170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800118e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011a2:	d106      	bne.n	80011b2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f023 0206 	bic.w	r2, r3, #6
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_ADC_Start+0x190>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d143      	bne.n	800126c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	e03a      	b.n	800126c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_ADC_Start+0x194>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10e      	bne.n	800121e <HAL_ADC_Start+0x126>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d107      	bne.n	800121e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_ADC_Start+0x190>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d120      	bne.n	800126c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_ADC_Start+0x198>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d11b      	bne.n	800126c <HAL_ADC_Start+0x174>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d114      	bne.n	800126c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	e00b      	b.n	800126c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f043 0210 	orr.w	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	431bde83 	.word	0x431bde83
 8001284:	fffff8fe 	.word	0xfffff8fe
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	40012200 	.word	0x40012200

08001294 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_Stop+0x16>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e01f      	b.n	80012ea <HAL_ADC_Stop+0x56>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_ADC_Stop+0x64>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	ffffeefe 	.word	0xffffeefe

080012fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	d113      	bne.n	8001342 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001328:	d10b      	bne.n	8001342 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0220 	orr.w	r2, r3, #32
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e063      	b.n	800140a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001342:	f7ff fe65 	bl	8001010 <HAL_GetTick>
 8001346:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001348:	e021      	b.n	800138e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d01d      	beq.n	800138e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_ADC_PollForConversion+0x6c>
 8001358:	f7ff fe5a 	bl	8001010 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d212      	bcs.n	800138e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d00b      	beq.n	800138e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f043 0204 	orr.w	r2, r3, #4
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e03d      	b.n	800140a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d1d6      	bne.n	800134a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f06f 0212 	mvn.w	r2, #18
 80013a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d123      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11f      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c>
 8001444:	2302      	movs	r3, #2
 8001446:	e12a      	b.n	800169e <HAL_ADC_ConfigChannel+0x272>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d93a      	bls.n	80014ce <HAL_ADC_ConfigChannel+0xa2>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001460:	d035      	beq.n	80014ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	3b1e      	subs	r3, #30
 8001478:	2207      	movs	r2, #7
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_ADC_ConfigChannel+0x280>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10a      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68d9      	ldr	r1, [r3, #12]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	061a      	lsls	r2, r3, #24
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	e035      	b.n	8001514 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68d9      	ldr	r1, [r3, #12]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4403      	add	r3, r0
 80014c0:	3b1e      	subs	r3, #30
 80014c2:	409a      	lsls	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014cc:	e022      	b.n	8001514 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6919      	ldr	r1, [r3, #16]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6919      	ldr	r1, [r3, #16]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	409a      	lsls	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b06      	cmp	r3, #6
 800151a:	d824      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	221f      	movs	r2, #31
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43da      	mvns	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	400a      	ands	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	b29b      	uxth	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b05      	subs	r3, #5
 8001558:	fa00 f203 	lsl.w	r2, r0, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	635a      	str	r2, [r3, #52]	; 0x34
 8001564:	e04c      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	d824      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	; 0x23
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b23      	subs	r3, #35	; 0x23
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
 80015b6:	e023      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	; 0x41
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b41      	subs	r3, #65	; 0x41
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_ADC_ConfigChannel+0x284>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10a      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1f4>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001612:	d105      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 800161a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800161e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_ADC_ConfigChannel+0x284>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d109      	bne.n	800163e <HAL_ADC_ConfigChannel+0x212>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b12      	cmp	r3, #18
 8001630:	d105      	bne.n	800163e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_ADC_ConfigChannel+0x284>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d125      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x268>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <HAL_ADC_ConfigChannel+0x280>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d003      	beq.n	800165a <HAL_ADC_ConfigChannel+0x22e>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b11      	cmp	r3, #17
 8001658:	d11c      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_ADC_ConfigChannel+0x288>)
 8001660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001664:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_ADC_ConfigChannel+0x280>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d111      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_ADC_ConfigChannel+0x28c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_ADC_ConfigChannel+0x290>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9a      	lsrs	r2, r3, #18
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001686:	e002      	b.n	800168e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3b01      	subs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f9      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	10000012 	.word	0x10000012
 80016b0:	40012000 	.word	0x40012000
 80016b4:	40012300 	.word	0x40012300
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016c8:	4b78      	ldr	r3, [pc, #480]	; (80018ac <ADC_Init+0x1ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a77      	ldr	r2, [pc, #476]	; (80018ac <ADC_Init+0x1ec>)
 80016ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016d4:	4b75      	ldr	r3, [pc, #468]	; (80018ac <ADC_Init+0x1ec>)
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4973      	ldr	r1, [pc, #460]	; (80018ac <ADC_Init+0x1ec>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	021a      	lsls	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <ADC_Init+0x1f0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00f      	b.n	80017ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0202 	bic.w	r2, r2, #2
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	035a      	lsls	r2, r3, #13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b01      	subs	r3, #1
 800184c:	051a      	lsls	r2, r3, #20
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	025a      	lsls	r2, r3, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <__NVIC_SetPriorityGrouping+0x40>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x40>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	05fa0000 	.word	0x05fa0000

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff8e 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff29 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff3e 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff8e 	bl	80019a8 <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff31 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff fa94 	bl	8001010 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d008      	beq.n	8001b08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e052      	b.n	8001bae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0216 	bic.w	r2, r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_DMA_Abort+0x62>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0208 	bic.w	r2, r2, #8
 8001b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b58:	e013      	b.n	8001b82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5a:	f7ff fa59 	bl	8001010 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d90c      	bls.n	8001b82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e015      	b.n	8001bae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e4      	bne.n	8001b5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	223f      	movs	r2, #63	; 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e00c      	b.n	8001bee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e175      	b.n	8001f08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 8164 	bne.w	8001f02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d00b      	beq.n	8001c5a <HAL_GPIO_Init+0x5e>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	2b11      	cmp	r3, #17
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x100>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d123      	bne.n	8001d44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	08da      	lsrs	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3208      	adds	r2, #8
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80be 	beq.w	8001f02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_GPIO_Init+0x324>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_GPIO_Init+0x324>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_GPIO_Init+0x324>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d9e:	4a61      	ldr	r2, [pc, #388]	; (8001f24 <HAL_GPIO_Init+0x328>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_GPIO_Init+0x32c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d037      	beq.n	8001e3a <HAL_GPIO_Init+0x23e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_GPIO_Init+0x23a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x334>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x236>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a55      	ldr	r2, [pc, #340]	; (8001f34 <HAL_GPIO_Init+0x338>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x232>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a54      	ldr	r2, [pc, #336]	; (8001f38 <HAL_GPIO_Init+0x33c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x22e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a53      	ldr	r2, [pc, #332]	; (8001f3c <HAL_GPIO_Init+0x340>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x22a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x344>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x348>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x222>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_GPIO_Init+0x34c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x21e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x21a>
 8001e12:	2309      	movs	r3, #9
 8001e14:	e012      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e16:	230a      	movs	r3, #10
 8001e18:	e010      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	e00e      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00c      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e00a      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x240>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e4c:	4935      	ldr	r1, [pc, #212]	; (8001f24 <HAL_GPIO_Init+0x328>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7e:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea8:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_GPIO_Init+0x354>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f ae86 	bls.w	8001c1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40021400 	.word	0x40021400
 8001f40:	40021800 	.word	0x40021800
 8001f44:	40021c00 	.word	0x40021c00
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40022400 	.word	0x40022400
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 f811 	bl	8009fce <HAL_GPIO_EXTI_Callback>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b08f      	sub	sp, #60	; 0x3c
 8001fbc:	af0a      	add	r7, sp, #40	; 0x28
 8001fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e116      	b.n	80021f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f007 fa47 	bl	8009478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f004 f9e2 	bl	80063d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	687e      	ldr	r6, [r7, #4]
 8002016:	466d      	mov	r5, sp
 8002018:	f106 0410 	add.w	r4, r6, #16
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002028:	e885 0003 	stmia.w	r5, {r0, r1}
 800202c:	1d33      	adds	r3, r6, #4
 800202e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f004 f8c3 	bl	80061bc <USB_CoreInit>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d7      	b.n	80021f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f9d0 	bl	80063f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e04a      	b.n	80020f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	333d      	adds	r3, #61	; 0x3d
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	333c      	adds	r3, #60	; 0x3c
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	b298      	uxth	r0, r3
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3342      	adds	r3, #66	; 0x42
 8002096:	4602      	mov	r2, r0
 8002098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	333f      	adds	r3, #63	; 0x3f
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3344      	adds	r3, #68	; 0x44
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3348      	adds	r3, #72	; 0x48
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3350      	adds	r3, #80	; 0x50
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3af      	bcc.n	800205a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e044      	b.n	800218a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3b5      	bcc.n	8002100 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	687e      	ldr	r6, [r7, #4]
 800219c:	466d      	mov	r5, sp
 800219e:	f106 0410 	add.w	r4, r6, #16
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b2:	1d33      	adds	r3, r6, #4
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f004 f946 	bl	8006448 <USB_DevInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e014      	b.n	80021f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 f880 	bl	80032ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 f99e 	bl	8007532 <USB_DevDisconnect>

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002200 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_Start+0x16>
 8002212:	2302      	movs	r3, #2
 8002214:	e012      	b.n	800223c <HAL_PCD_Start+0x3c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 f8c4 	bl	80063b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f005 f95f 	bl	80074f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b08d      	sub	sp, #52	; 0x34
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f005 fa1d 	bl	800769a <USB_GetMode>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 83ca 	bne.w	80029fc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f005 f981 	bl	8007574 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 83c0 	beq.w	80029fa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f005 f978 	bl	8007574 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d107      	bne.n	800229e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f002 0202 	and.w	r2, r2, #2
 800229c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 f966 	bl	8007574 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d161      	bne.n	8002376 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0210 	bic.w	r2, r2, #16
 80022c0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 020f 	and.w	r2, r3, #15
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	0c5b      	lsrs	r3, r3, #17
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d124      	bne.n	8002338 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d035      	beq.n	8002366 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6a38      	ldr	r0, [r7, #32]
 800230e:	f004 ffcc 	bl	80072aa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231e:	441a      	add	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002330:	441a      	add	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	619a      	str	r2, [r3, #24]
 8002336:	e016      	b.n	8002366 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	0c5b      	lsrs	r3, r3, #17
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2b06      	cmp	r3, #6
 8002342:	d110      	bne.n	8002366 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800234a:	2208      	movs	r2, #8
 800234c:	4619      	mov	r1, r3
 800234e:	6a38      	ldr	r0, [r7, #32]
 8002350:	f004 ffab 	bl	80072aa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002360:	441a      	add	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0210 	orr.w	r2, r2, #16
 8002374:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f005 f8fa 	bl	8007574 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002386:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800238a:	d16e      	bne.n	800246a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f005 f900 	bl	800759a <USB_ReadDevAllOutEpInterrupt>
 800239a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800239c:	e062      	b.n	8002464 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d057      	beq.n	8002458 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 f925 	bl	8007602 <USB_ReadDevOutEPInterrupt>
 80023b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fddd 	bl	8002f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2308      	movs	r3, #8
 80023f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fed7 	bl	80031b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	2310      	movs	r3, #16
 800241c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2320      	movs	r3, #32
 8002438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002456:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d199      	bne.n	800239e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f005 f880 	bl	8007574 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800247e:	f040 80c0 	bne.w	8002602 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f005 f8a1 	bl	80075ce <USB_ReadDevAllInEpInterrupt>
 800248c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002492:	e0b2      	b.n	80025fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a7 	beq.w	80025ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 f8c7 	bl	800763e <USB_ReadDevInEPInterrupt>
 80024b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d057      	beq.n	800256c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69f9      	ldr	r1, [r7, #28]
 80024d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024dc:	4013      	ands	r3, r2
 80024de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	461a      	mov	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d132      	bne.n	8002560 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3348      	adds	r3, #72	; 0x48
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4403      	add	r3, r0
 800251a:	3344      	adds	r3, #68	; 0x44
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4419      	add	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4403      	add	r3, r0
 800252e:	3348      	adds	r3, #72	; 0x48
 8002530:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d113      	bne.n	8002560 <HAL_PCD_IRQHandler+0x31c>
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3350      	adds	r3, #80	; 0x50
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002558:	461a      	mov	r2, r3
 800255a:	2101      	movs	r1, #1
 800255c:	f005 f8d0 	bl	8007700 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f007 f809 	bl	800957e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002582:	461a      	mov	r2, r3
 8002584:	2308      	movs	r3, #8
 8002586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259e:	461a      	mov	r2, r3
 80025a0:	2310      	movs	r3, #16
 80025a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ba:	461a      	mov	r2, r3
 80025bc:	2340      	movs	r3, #64	; 0x40
 80025be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d6:	461a      	mov	r2, r3
 80025d8:	2302      	movs	r3, #2
 80025da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fc48 	bl	8002e7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	3301      	adds	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f af49 	bne.w	8002494 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f004 ffb4 	bl	8007574 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002616:	d122      	bne.n	800265e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f007 f9eb 	bl	8009a1c <HAL_PCDEx_LPM_Callback>
 8002646:	e002      	b.n	800264e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f007 f80f 	bl	800966c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800265c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 ff86 	bl	8007574 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002672:	d112      	bne.n	800269a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 ffcb 	bl	8009620 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002698:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 ff68 	bl	8007574 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ae:	d121      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026e4:	2101      	movs	r1, #1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f007 f998 	bl	8009a1c <HAL_PCDEx_LPM_Callback>
 80026ec:	e002      	b.n	80026f4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f006 ff96 	bl	8009620 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 ff3b 	bl	8007574 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	f040 80c7 	bne.w	800289a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2110      	movs	r1, #16
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fffc 	bl	8006724 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002730:	e056      	b.n	80027e0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273e:	461a      	mov	r2, r3
 8002740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002744:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	440a      	add	r2, r1
 800275c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002764:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	0151      	lsls	r1, r2, #5
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	440a      	add	r2, r1
 800277c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002798:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	0151      	lsls	r1, r2, #5
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	440a      	add	r2, r1
 80027d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3301      	adds	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d3a3      	bcc.n	8002732 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002816:	f043 030b 	orr.w	r3, r3, #11
 800281a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282c:	f043 030b 	orr.w	r3, r3, #11
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	e015      	b.n	8002860 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002842:	4619      	mov	r1, r3
 8002844:	f242 032b 	movw	r3, #8235	; 0x202b
 8002848:	4313      	orrs	r3, r2
 800284a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285a:	f043 030b 	orr.w	r3, r3, #11
 800285e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002872:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002884:	461a      	mov	r2, r3
 8002886:	f004 ff3b 	bl	8007700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fe68 	bl	8007574 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d124      	bne.n	80028fa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 feff 	bl	80076b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 ff91 	bl	80067e6 <USB_GetDevSpeed>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681c      	ldr	r4, [r3, #0]
 80028d0:	f001 fa70 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	4620      	mov	r0, r4
 80028e0:	f003 fcc4 	bl	800626c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f006 fe72 	bl	80095ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fe38 	bl	8007574 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d10a      	bne.n	8002924 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f006 fe4f 	bl	80095b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f002 0208 	and.w	r2, r2, #8
 8002922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fe23 	bl	8007574 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002938:	d10f      	bne.n	800295a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f006 feb1 	bl	80096ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f004 fe08 	bl	8007574 <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296e:	d10f      	bne.n	8002990 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f006 fe84 	bl	8009688 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 fded 	bl	8007574 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d10a      	bne.n	80029bc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f006 fe92 	bl	80096d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fdd7 	bl	8007574 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d115      	bne.n	80029fc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f006 fe82 	bl	80096ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e000      	b.n	80029fc <HAL_PCD_IRQHandler+0x7b8>
      return;
 80029fa:	bf00      	nop
    }
  }
}
 80029fc:	3734      	adds	r7, #52	; 0x34
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}

08002a02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_SetAddress+0x1a>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e013      	b.n	8002a44 <HAL_PCD_SetAddress+0x42>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fd35 	bl	80074a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	70fb      	strb	r3, [r7, #3]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	803b      	strh	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da0f      	bge.n	8002a92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 020f 	and.w	r2, r3, #15
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	3338      	adds	r3, #56	; 0x38
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	705a      	strb	r2, [r3, #1]
 8002a90:	e00f      	b.n	8002ab2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 020f 	and.w	r2, r3, #15
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002abe:	883a      	ldrh	r2, [r7, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	78ba      	ldrb	r2, [r7, #2]
 8002ac8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002adc:	78bb      	ldrb	r3, [r7, #2]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d102      	bne.n	8002ae8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_PCD_EP_Open+0xaa>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e00e      	b.n	8002b14 <HAL_PCD_EP_Open+0xc8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fe93 	bl	8006830 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b12:	7afb      	ldrb	r3, [r7, #11]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da0f      	bge.n	8002b50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3338      	adds	r3, #56	; 0x38
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	705a      	strb	r2, [r3, #1]
 8002b4e:	e00f      	b.n	8002b70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_EP_Close+0x6e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e00e      	b.n	8002ba8 <HAL_PCD_EP_Close+0x8c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fed1 	bl	8006940 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf2:	7afb      	ldrb	r3, [r7, #11]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	f004 f9b4 	bl	8006f90 <USB_EP0StartXfer>
 8002c28:	e008      	b.n	8002c3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	f003 ff5e 	bl	8006af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c68:	681b      	ldr	r3, [r3, #0]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	460b      	mov	r3, r1
 8002c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	3338      	adds	r3, #56	; 0x38
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6979      	ldr	r1, [r7, #20]
 8002ce8:	f004 f952 	bl	8006f90 <USB_EP0StartXfer>
 8002cec:	e008      	b.n	8002d00 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6979      	ldr	r1, [r7, #20]
 8002cfc:	f003 fefc 	bl	8006af8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d901      	bls.n	8002d28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e050      	b.n	8002dca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0f      	bge.n	8002d50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
 8002d4e:	e00d      	b.n	8002d6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_PCD_EP_SetStall+0x82>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e01e      	b.n	8002dca <HAL_PCD_EP_SetStall+0xc0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 faae 	bl	80072fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	b2d9      	uxtb	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f004 fca0 	bl	8007700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d901      	bls.n	8002df0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e042      	b.n	8002e76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da0f      	bge.n	8002e18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 020f 	and.w	r2, r3, #15
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	3338      	adds	r3, #56	; 0x38
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	705a      	strb	r2, [r3, #1]
 8002e16:	e00f      	b.n	8002e38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_EP_ClrStall+0x86>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e00e      	b.n	8002e76 <HAL_PCD_EP_ClrStall+0xa4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68f9      	ldr	r1, [r7, #12]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fab6 	bl	80073d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b08a      	sub	sp, #40	; 0x28
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	3338      	adds	r3, #56	; 0x38
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d901      	bls.n	8002eb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06c      	b.n	8002f90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d902      	bls.n	8002ed2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eda:	e02b      	b.n	8002f34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d902      	bls.n	8002ef8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3303      	adds	r3, #3
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68d9      	ldr	r1, [r3, #12]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4603      	mov	r3, r0
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f004 f992 	bl	8007240 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	441a      	add	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d809      	bhi.n	8002f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d203      	bcs.n	8002f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1be      	bne.n	8002edc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d811      	bhi.n	8002f8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	2201      	movs	r2, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	6939      	ldr	r1, [r7, #16]
 8002f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	333c      	adds	r3, #60	; 0x3c
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 80a0 	bne.w	8003110 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d015      	beq.n	8003006 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f240 80dd 	bls.w	800319e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80d7 	beq.w	800319e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	e0cb      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	2320      	movs	r3, #32
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e0bc      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 80b7 	bne.w	800319e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d90f      	bls.n	8003058 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e0a2      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800306a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	0159      	lsls	r1, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	440b      	add	r3, r1
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800307e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003092:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4403      	add	r3, r0
 80030b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4419      	add	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d114      	bne.n	8003102 <PCD_EP_OutXfrComplete_int+0x16a>
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030fa:	461a      	mov	r2, r3
 80030fc:	2101      	movs	r1, #1
 80030fe:	f004 faff 	bl	8007700 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f006 fa1d 	bl	8009548 <HAL_PCD_DataOutStageCallback>
 800310e:	e046      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a26      	ldr	r2, [pc, #152]	; (80031ac <PCD_EP_OutXfrComplete_int+0x214>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d124      	bne.n	8003162 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003134:	6093      	str	r3, [r2, #8]
 8003136:	e032      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	2320      	movs	r3, #32
 8003152:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 f9f4 	bl	8009548 <HAL_PCD_DataOutStageCallback>
 8003160:	e01d      	b.n	800319e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d114      	bne.n	8003192 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d108      	bne.n	8003192 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800318a:	461a      	mov	r2, r3
 800318c:	2100      	movs	r1, #0
 800318e:	f004 fab7 	bl	8007700 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f006 f9d5 	bl	8009548 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	4f54300a 	.word	0x4f54300a
 80031ac:	4f54310a 	.word	0x4f54310a

080031b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	333c      	adds	r3, #60	; 0x3c
 80031c8:	3304      	adds	r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a15      	ldr	r2, [pc, #84]	; (8003238 <PCD_EP_OutSetupPacket_int+0x88>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d90e      	bls.n	8003204 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f006 f98d 	bl	8009524 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <PCD_EP_OutSetupPacket_int+0x88>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90c      	bls.n	800322c <PCD_EP_OutSetupPacket_int+0x7c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003224:	461a      	mov	r2, r3
 8003226:	2101      	movs	r1, #1
 8003228:	f004 fa6a 	bl	8007700 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	4f54300a 	.word	0x4f54300a

0800323c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
 8003248:	4613      	mov	r3, r2
 800324a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800325a:	883b      	ldrh	r3, [r7, #0]
 800325c:	0419      	lsls	r1, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	430a      	orrs	r2, r1
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
 8003268:	e028      	b.n	80032bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	e00d      	b.n	800329a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	3340      	adds	r3, #64	; 0x40
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4413      	add	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	3301      	adds	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	3b01      	subs	r3, #1
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3ec      	bcc.n	800327e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032a4:	883b      	ldrh	r3, [r7, #0]
 80032a6:	0418      	lsls	r0, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4302      	orrs	r2, r0
 80032b4:	3340      	adds	r3, #64	; 0x40
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_PCDEx_ActivateLPM+0x44>)
 800331c:	4313      	orrs	r3, r2
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	10000003 	.word	0x10000003

08003334 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_PWREx_EnableOverDrive+0x98>)
 8003364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_PWREx_EnableOverDrive+0x98>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003382:	f7fd fe45 	bl	8001010 <HAL_GetTick>
 8003386:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003388:	e009      	b.n	800339e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800338a:	f7fd fe41 	bl	8001010 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003398:	d901      	bls.n	800339e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e022      	b.n	80033e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d1ee      	bne.n	800338a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b8:	f7fd fe2a 	bl	8001010 <HAL_GetTick>
 80033bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033be:	e009      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c0:	f7fd fe26 	bl	8001010 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ce:	d901      	bls.n	80033d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e007      	b.n	80033e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e0:	d1ee      	bne.n	80033c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e29b      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8087 	beq.w	8003526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003418:	4b96      	ldr	r3, [pc, #600]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b04      	cmp	r3, #4
 8003422:	d00c      	beq.n	800343e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003424:	4b93      	ldr	r3, [pc, #588]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d112      	bne.n	8003456 <HAL_RCC_OscConfig+0x62>
 8003430:	4b90      	ldr	r3, [pc, #576]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06c      	beq.n	8003524 <HAL_RCC_OscConfig+0x130>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d168      	bne.n	8003524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e275      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x7a>
 8003460:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a83      	ldr	r2, [pc, #524]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e02e      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x9c>
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800347c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7b      	ldr	r2, [pc, #492]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e01d      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a75      	ldr	r2, [pc, #468]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a72      	ldr	r2, [pc, #456]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6e      	ldr	r2, [pc, #440]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6b      	ldr	r2, [pc, #428]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd fd9c 	bl	8001010 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fd fd98 	bl	8001010 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e229      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fd88 	bl	8001010 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fd fd84 	bl	8001010 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e215      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x110>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d069      	beq.n	8003606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003532:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x190>
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x17a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1e9      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	493d      	ldr	r1, [pc, #244]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e040      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fd3a 	bl	8001010 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fd fd36 	bl	8001010 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1c7      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4929      	ldr	r1, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	e018      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fd16 	bl	8001010 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fd fd12 	bl	8001010 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1a3      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d038      	beq.n	8003684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd fcf3 	bl	8001010 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362e:	f7fd fcef 	bl	8001010 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e180      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x23a>
 800364c:	e01a      	b.n	8003684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_RCC_OscConfig+0x280>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fd fcd9 	bl	8001010 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003662:	f7fd fcd5 	bl	8001010 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d903      	bls.n	8003678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e166      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
 8003674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b92      	ldr	r3, [pc, #584]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ee      	bne.n	8003662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a4 	beq.w	80037da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	4b89      	ldr	r3, [pc, #548]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a88      	ldr	r2, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b86      	ldr	r3, [pc, #536]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ba:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <HAL_RCC_OscConfig+0x4d4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036c6:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x4d4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7f      	ldr	r2, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x4d4>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fc9d 	bl	8001010 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fd fc99 	bl	8001010 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e12a      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ec:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x4d4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x31a>
 8003700:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a6f      	ldr	r2, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	e02d      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x33c>
 8003716:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a6a      	ldr	r2, [pc, #424]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b68      	ldr	r3, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a67      	ldr	r2, [pc, #412]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e01c      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x35e>
 8003738:	4b62      	ldr	r3, [pc, #392]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a61      	ldr	r2, [pc, #388]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b5f      	ldr	r3, [pc, #380]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a5e      	ldr	r2, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 8003752:	4b5c      	ldr	r3, [pc, #368]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a5b      	ldr	r2, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fc4d 	bl	8001010 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fc49 	bl	8001010 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0d8      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCC_OscConfig+0x386>
 800379c:	e014      	b.n	80037c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd fc37 	bl	8001010 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd fc33 	bl	8001010 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0c2      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037bc:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a3c      	ldr	r2, [pc, #240]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80ae 	beq.w	8003940 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e4:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d06d      	beq.n	80038cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d14b      	bne.n	8003890 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fc04 	bl	8001010 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fc00 	bl	8001010 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e091      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	491b      	ldr	r1, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fbd2 	bl	8001010 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fd fbce 	bl	8001010 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e05f      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x47c>
 800388e:	e057      	b.n	8003940 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd fbb8 	bl	8001010 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fbb4 	bl	8001010 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e045      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4b0>
 80038c2:	e03d      	b.n	8003940 <HAL_RCC_OscConfig+0x54c>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <HAL_RCC_OscConfig+0x558>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d030      	beq.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d129      	bne.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d122      	bne.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003902:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003904:	4293      	cmp	r3, r2
 8003906:	d119      	bne.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d10f      	bne.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d0      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d910      	bls.n	8003998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b67      	ldr	r3, [pc, #412]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 020f 	bic.w	r2, r3, #15
 800397e:	4965      	ldr	r1, [pc, #404]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d040      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d115      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e073      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06b      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4936      	ldr	r1, [pc, #216]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a44:	f7fd fae4 	bl	8001010 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7fd fae0 	bl	8001010 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e053      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 020c 	and.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1eb      	bne.n	8003a4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a74:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d210      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 020f 	bic.w	r2, r3, #15
 8003a8a:	4922      	ldr	r1, [pc, #136]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f885 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x1cc>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1d0>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1d4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fa40 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0800a5ac 	.word	0x0800a5ac
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d127      	bne.n	8003b8a <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	481e      	ldr	r0, [pc, #120]	; (8003be8 <HAL_RCC_MCOConfig+0xc0>)
 8003b70:	f7fe f844 	bl	8001bfc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	4918      	ldr	r1, [pc, #96]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8003b88:	e027      	b.n	8003bda <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bac:	2303      	movs	r3, #3
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	480b      	ldr	r0, [pc, #44]	; (8003bec <HAL_RCC_MCOConfig+0xc4>)
 8003bc0:	f7fe f81c 	bl	8001bfc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	00d9      	lsls	r1, r3, #3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	4903      	ldr	r1, [pc, #12]	; (8003be4 <HAL_RCC_MCOConfig+0xbc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
}
 8003bda:	bf00      	nop
 8003bdc:	3730      	adds	r7, #48	; 0x30
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020800 	.word	0x40020800

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	2300      	movs	r3, #0
 8003c02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4b67      	ldr	r3, [pc, #412]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 80bd 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c22:	e0b7      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c26:	60bb      	str	r3, [r7, #8]
      break;
 8003c28:	e0b7      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2a:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c2c:	60bb      	str	r3, [r7, #8]
      break;
 8003c2e:	e0b4      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c3a:	4b5b      	ldr	r3, [pc, #364]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d04d      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b58      	ldr	r3, [pc, #352]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	ea02 0800 	and.w	r8, r2, r0
 8003c5e:	ea03 0901 	and.w	r9, r3, r1
 8003c62:	4640      	mov	r0, r8
 8003c64:	4649      	mov	r1, r9
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	014b      	lsls	r3, r1, #5
 8003c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c74:	0142      	lsls	r2, r0, #5
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	ebb0 0008 	subs.w	r0, r0, r8
 8003c7e:	eb61 0109 	sbc.w	r1, r1, r9
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c90:	0182      	lsls	r2, r0, #6
 8003c92:	1a12      	subs	r2, r2, r0
 8003c94:	eb63 0301 	sbc.w	r3, r3, r1
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	00d9      	lsls	r1, r3, #3
 8003ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca6:	00d0      	lsls	r0, r2, #3
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	eb12 0208 	adds.w	r2, r2, r8
 8003cb0:	eb43 0309 	adc.w	r3, r3, r9
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	0259      	lsls	r1, r3, #9
 8003cbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cc2:	0250      	lsls	r0, r2, #9
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f7fc fab0 	bl	8000238 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4613      	mov	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e04a      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	ea02 0400 	and.w	r4, r2, r0
 8003cfa:	ea03 0501 	and.w	r5, r3, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	014b      	lsls	r3, r1, #5
 8003d0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d10:	0142      	lsls	r2, r0, #5
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	1b00      	subs	r0, r0, r4
 8003d18:	eb61 0105 	sbc.w	r1, r1, r5
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	018b      	lsls	r3, r1, #6
 8003d26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d2a:	0182      	lsls	r2, r0, #6
 8003d2c:	1a12      	subs	r2, r2, r0
 8003d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	00d9      	lsls	r1, r3, #3
 8003d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d40:	00d0      	lsls	r0, r2, #3
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	1912      	adds	r2, r2, r4
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0299      	lsls	r1, r3, #10
 8003d56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d5a:	0290      	lsls	r0, r2, #10
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f7fc fa64 	bl	8000238 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	60bb      	str	r3, [r7, #8]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d96:	60bb      	str	r3, [r7, #8]
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000000 	.word	0x20000000

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	0800a5bc 	.word	0x0800a5bc

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df8:	f7ff ffdc 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800a5bc 	.word	0x0800a5bc

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e44:	4b69      	ldr	r3, [pc, #420]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a68      	ldr	r2, [pc, #416]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e4e:	6093      	str	r3, [r2, #8]
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	4964      	ldr	r1, [pc, #400]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d017      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e76:	4b5d      	ldr	r3, [pc, #372]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	4959      	ldr	r1, [pc, #356]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	494a      	ldr	r1, [pc, #296]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 808b 	beq.w	8004016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f00:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a39      	ldr	r2, [pc, #228]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0c:	4b37      	ldr	r3, [pc, #220]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f18:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f24:	f7fd f874 	bl	8001010 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fd f870 	bl	8001010 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e38f      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d035      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d02e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f8a:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d114      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f838 	bl	8001010 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa2:	e00a      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fd f834 	bl	8001010 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e351      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ee      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd2:	d111      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fe2:	400b      	ands	r3, r1
 8003fe4:	4901      	ldr	r1, [pc, #4]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
 8003fea:	e00b      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	0ffffcff 	.word	0x0ffffcff
 8003ff8:	4bb3      	ldr	r3, [pc, #716]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4ab2      	ldr	r2, [pc, #712]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	4bb0      	ldr	r3, [pc, #704]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	49ad      	ldr	r1, [pc, #692]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004012:	4313      	orrs	r3, r2
 8004014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d010      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004022:	4ba9      	ldr	r3, [pc, #676]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004028:	4aa7      	ldr	r2, [pc, #668]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004032:	4ba5      	ldr	r3, [pc, #660]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	49a2      	ldr	r1, [pc, #648]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004050:	4b9d      	ldr	r3, [pc, #628]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405e:	499a      	ldr	r1, [pc, #616]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004072:	4b95      	ldr	r3, [pc, #596]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004080:	4991      	ldr	r1, [pc, #580]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004094:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	4989      	ldr	r1, [pc, #548]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040b6:	4b84      	ldr	r3, [pc, #528]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4980      	ldr	r1, [pc, #512]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	4978      	ldr	r1, [pc, #480]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040fa:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f023 020c 	bic.w	r2, r3, #12
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004108:	496f      	ldr	r1, [pc, #444]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800411c:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	4967      	ldr	r1, [pc, #412]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800413e:	4b62      	ldr	r3, [pc, #392]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414c:	495e      	ldr	r1, [pc, #376]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004160:	4b59      	ldr	r3, [pc, #356]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	4956      	ldr	r1, [pc, #344]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004182:	4b51      	ldr	r3, [pc, #324]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	494d      	ldr	r1, [pc, #308]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	4945      	ldr	r1, [pc, #276]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041c6:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d4:	493c      	ldr	r1, [pc, #240]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f6:	4934      	ldr	r1, [pc, #208]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d011      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004218:	492b      	ldr	r1, [pc, #172]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004228:	d101      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800422a:	2301      	movs	r3, #1
 800422c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800423a:	2301      	movs	r3, #1
 800423c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	491b      	ldr	r1, [pc, #108]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	4912      	ldr	r1, [pc, #72]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a0:	4909      	ldr	r1, [pc, #36]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	e002      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	4986      	ldr	r1, [pc, #536]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042e0:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	497d      	ldr	r1, [pc, #500]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d006      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80d6 	beq.w	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800430c:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a75      	ldr	r2, [pc, #468]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fc fe7a 	bl	8001010 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004320:	f7fc fe76 	bl	8001010 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e195      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d021      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004360:	4b61      	ldr	r3, [pc, #388]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004366:	0e1b      	lsrs	r3, r3, #24
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	019a      	lsls	r2, r3, #6
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	4958      	ldr	r1, [pc, #352]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d02e      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b8:	d129      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ba:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043c8:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0f1b      	lsrs	r3, r3, #28
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	493e      	ldr	r1, [pc, #248]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043f6:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f023 021f 	bic.w	r2, r3, #31
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	3b01      	subs	r3, #1
 8004406:	4938      	ldr	r1, [pc, #224]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01d      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800441a:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442e:	0f1b      	lsrs	r3, r3, #28
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	019a      	lsls	r2, r3, #6
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	4926      	ldr	r1, [pc, #152]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	019a      	lsls	r2, r3, #6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	071b      	lsls	r3, r3, #28
 800447e:	491a      	ldr	r1, [pc, #104]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004492:	f7fc fdbd 	bl	8001010 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800449a:	f7fc fdb9 	bl	8001010 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0d8      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	f040 80ce 	bne.w	800465c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fc fda0 	bl	8001010 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044d2:	e00b      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044d4:	f7fc fd9c 	bl	8001010 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d904      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0bb      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044ec:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f8:	d0ec      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02e      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d12a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004522:	4b51      	ldr	r3, [pc, #324]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004530:	4b4d      	ldr	r3, [pc, #308]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	0f1b      	lsrs	r3, r3, #28
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	019a      	lsls	r2, r3, #6
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	071b      	lsls	r3, r3, #28
 8004556:	4944      	ldr	r1, [pc, #272]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800455e:	4b42      	ldr	r3, [pc, #264]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	493d      	ldr	r1, [pc, #244]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d022      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458c:	d11d      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	0f1b      	lsrs	r3, r3, #28
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	019a      	lsls	r2, r3, #6
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	431a      	orrs	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	061b      	lsls	r3, r3, #24
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	4929      	ldr	r1, [pc, #164]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	019a      	lsls	r2, r3, #6
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	071b      	lsls	r3, r3, #28
 800460a:	4917      	ldr	r1, [pc, #92]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4911      	ldr	r1, [pc, #68]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fc fcec 	bl	8001010 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800463c:	f7fc fce8 	bl	8001010 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e007      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465a:	d1ef      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800

0800466c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e049      	b.n	8004712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc faf4 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 fbd6 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e054      	b.n	80047de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d01d      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <HAL_TIM_Base_Start_IT+0xe4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <HAL_TIM_Base_Start_IT+0xe8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d115      	bne.n	80047c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_TIM_Base_Start_IT+0xec>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d015      	beq.n	80047da <HAL_TIM_Base_Start_IT+0xbe>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d011      	beq.n	80047da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e008      	b.n	80047da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e000      	b.n	80047dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40001800 	.word	0x40001800
 8004808:	00010007 	.word	0x00010007

0800480c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f241 1311 	movw	r3, #4369	; 0x1111
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <HAL_TIM_Base_Stop_IT+0x48>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a1a      	ldr	r2, [r3, #32]
 800483a:	f240 4344 	movw	r3, #1092	; 0x444
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_TIM_Base_Stop_IT+0x48>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e049      	b.n	8004910 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc fa1b 	bl	8000ccc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 fad7 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0202 	mvn.w	r2, #2
 8004944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa60 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa52 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa63 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0204 	mvn.w	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa36 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa28 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa39 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0208 	mvn.w	r2, #8
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2204      	movs	r2, #4
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa0c 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9fe 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa0f 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9e2 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9d4 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9e5 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f005 faa8 	bl	8009fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fcc6 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fcb9 	bl	8005468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f993 	bl	8004e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0220 	mvn.w	r2, #32
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fc79 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e082      	b.n	8004c76 <HAL_TIM_IC_ConfigChannel+0x120>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 fa05 	bl	8004f9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 020c 	bic.w	r2, r2, #12
 8004ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
 8004bb4:	e05a      	b.n	8004c6c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11c      	bne.n	8004bf6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f000 fa89 	bl	80050e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	619a      	str	r2, [r3, #24]
 8004bf4:	e03a      	b.n	8004c6c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f000 fad6 	bl	80051bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 020c 	bic.w	r2, r2, #12
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69d9      	ldr	r1, [r3, #28]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
 8004c32:	e01b      	b.n	8004c6c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f000 faf6 	bl	8005234 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69d9      	ldr	r1, [r3, #28]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_ConfigClockSource+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0b3      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x180>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4b55      	ldr	r3, [pc, #340]	; (8004e08 <HAL_TIM_ConfigClockSource+0x188>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd0:	d03e      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0xd0>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd6:	f200 8087 	bhi.w	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	f000 8085 	beq.w	8004dec <HAL_TIM_ConfigClockSource+0x16c>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d87f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004ce8:	2b70      	cmp	r3, #112	; 0x70
 8004cea:	d01a      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0xa2>
 8004cec:	2b70      	cmp	r3, #112	; 0x70
 8004cee:	d87b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004cf0:	2b60      	cmp	r3, #96	; 0x60
 8004cf2:	d050      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x116>
 8004cf4:	2b60      	cmp	r3, #96	; 0x60
 8004cf6:	d877      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004cf8:	2b50      	cmp	r3, #80	; 0x50
 8004cfa:	d03c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0xf6>
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d873      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d058      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x136>
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d86f      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d064      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x156>
 8004d0c:	2b30      	cmp	r3, #48	; 0x30
 8004d0e:	d86b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d060      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x156>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d867      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05c      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x156>
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d05a      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d20:	e062      	b.n	8004de8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6899      	ldr	r1, [r3, #8]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f000 fad7 	bl	80052e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	609a      	str	r2, [r3, #8]
      break;
 8004d4e:	e04e      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6899      	ldr	r1, [r3, #8]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f000 fac0 	bl	80052e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d72:	609a      	str	r2, [r3, #8]
      break;
 8004d74:	e03b      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f000 f97e 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2150      	movs	r1, #80	; 0x50
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fa8d 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d94:	e02b      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 f9da 	bl	800515c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2160      	movs	r1, #96	; 0x60
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fa7d 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004db4:	e01b      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 f95e 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2140      	movs	r1, #64	; 0x40
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa6d 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f000 fa64 	bl	80052ae <TIM_ITRx_SetConfig>
        break;
 8004de6:	e002      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004dec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	fffeff88 	.word	0xfffeff88

08004e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3c      	ldr	r2, [pc, #240]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3b      	ldr	r2, [pc, #236]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d027      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d023      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d017      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <TIM_Base_SetConfig+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <TIM_Base_SetConfig+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0xf8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40001800 	.word	0x40001800
 8004f94:	40001c00 	.word	0x40001c00
 8004f98:	40002000 	.word	0x40002000

08004f9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a28      	ldr	r2, [pc, #160]	; (8005068 <TIM_TI1_SetConfig+0xcc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d017      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a25      	ldr	r2, [pc, #148]	; (800506c <TIM_TI1_SetConfig+0xd0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <TIM_TI1_SetConfig+0xd4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a23      	ldr	r2, [pc, #140]	; (8005074 <TIM_TI1_SetConfig+0xd8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <TIM_TI1_SetConfig+0xdc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a21      	ldr	r2, [pc, #132]	; (800507c <TIM_TI1_SetConfig+0xe0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_TI1_SetConfig+0x66>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a20      	ldr	r2, [pc, #128]	; (8005080 <TIM_TI1_SetConfig+0xe4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <TIM_TI1_SetConfig+0x6a>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <TIM_TI1_SetConfig+0x6c>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e003      	b.n	8005026 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	b2db      	uxtb	r3, r3
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f023 030a 	bic.w	r3, r3, #10
 8005040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 030a 	and.w	r3, r3, #10
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40001800 	.word	0x40001800

08005084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 030a 	bic.w	r3, r3, #10
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	b29b      	uxth	r3, r3
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005134:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f023 0210 	bic.w	r2, r3, #16
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	031b      	lsls	r3, r3, #12
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0303 	bic.w	r3, r3, #3
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800520c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005260:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005272:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	031b      	lsls	r3, r3, #12
 8005278:	b29b      	uxth	r3, r3
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005286:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	031b      	lsls	r3, r3, #12
 800528c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e06d      	b.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a30      	ldr	r2, [pc, #192]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d108      	bne.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a20      	ldr	r2, [pc, #128]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d022      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d01d      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e040      	b.n	8005510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb fc56 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	; 0x24
 80054a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa56 	bl	800596c <UART_SetConfig>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e022      	b.n	8005510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fcac 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fd33 	bl	8005f74 <UART_CheckIdleState>
 800550e:	4603      	mov	r3, r0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	f640 030f 	movw	r3, #2063	; 0x80f
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d113      	bne.n	8005570 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00e      	beq.n	8005570 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 81cc 	beq.w	80058fe <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
      }
      return;
 800556e:	e1c6      	b.n	80058fe <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80e3 	beq.w	800573e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d105      	bne.n	800558e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4ba5      	ldr	r3, [pc, #660]	; (800581c <HAL_UART_IRQHandler+0x304>)
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80d8 	beq.w	800573e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <HAL_UART_IRQHandler+0xa2>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b0:	f043 0201 	orr.w	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_UART_IRQHandler+0xce>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2202      	movs	r2, #2
 80055d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d010      	beq.n	8005612 <HAL_UART_IRQHandler+0xfa>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2204      	movs	r2, #4
 8005600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005608:	f043 0202 	orr.w	r2, r3, #2
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563e:	f043 0208 	orr.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564e:	2b00      	cmp	r3, #0
 8005650:	d011      	beq.n	8005676 <HAL_UART_IRQHandler+0x15e>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8140 	beq.w	8005902 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d004      	beq.n	80056c6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fd19 	bl	80060fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d123      	bne.n	8005722 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a4a      	ldr	r2, [pc, #296]	; (8005820 <HAL_UART_IRQHandler+0x308>)
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fa59 	bl	8001bb6 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00f      	b.n	800573a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f906 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00b      	b.n	800573a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f902 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e007      	b.n	800573a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f8fe 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005738:	e0e3      	b.n	8005902 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573a:	bf00      	nop
    return;
 800573c:	e0e1      	b.n	8005902 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	2b01      	cmp	r3, #1
 8005744:	f040 80a7 	bne.w	8005896 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80a1 	beq.w	8005896 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 809b 	beq.w	8005896 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2210      	movs	r2, #16
 8005766:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d156      	bne.n	8005824 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80bf 	beq.w	8005906 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800578e:	893a      	ldrh	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	f080 80b8 	bcs.w	8005906 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	893a      	ldrh	r2, [r7, #8]
 800579a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a8:	d02a      	beq.n	8005800 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0210 	bic.w	r2, r2, #16
 80057f4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc f96b 	bl	8001ad6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580c:	b29b      	uxth	r3, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	b29b      	uxth	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f893 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800581a:	e074      	b.n	8005906 <HAL_UART_IRQHandler+0x3ee>
 800581c:	04000120 	.word	0x04000120
 8005820:	0800615d 	.word	0x0800615d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005830:	b29b      	uxth	r3, r3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d063      	beq.n	800590a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d060      	beq.n	800590a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005856:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0210 	bic.w	r2, r2, #16
 8005888:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800588a:	897b      	ldrh	r3, [r7, #10]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f856 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005894:	e039      	b.n	800590a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_UART_IRQHandler+0x3a4>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f84f 	bl	8005958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ba:	e029      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01a      	beq.n	800590e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
    }
    return;
 80058e0:	e015      	b.n	800590e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d011      	beq.n	8005910 <HAL_UART_IRQHandler+0x3f8>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fc46 	bl	8006188 <UART_EndTransmit_IT>
    return;
 80058fc:	e008      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
      return;
 80058fe:	bf00      	nop
 8005900:	e006      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005902:	bf00      	nop
 8005904:	e004      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005906:	bf00      	nop
 8005908:	e002      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
      return;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_UART_IRQHandler+0x3f8>
    return;
 800590e:	bf00      	nop
  }

}
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop

08005918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4ba7      	ldr	r3, [pc, #668]	; (8005c34 <UART_SetConfig+0x2c8>)
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	6979      	ldr	r1, [r7, #20]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a95      	ldr	r2, [pc, #596]	; (8005c38 <UART_SetConfig+0x2cc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d120      	bne.n	8005a2a <UART_SetConfig+0xbe>
 80059e8:	4b94      	ldr	r3, [pc, #592]	; (8005c3c <UART_SetConfig+0x2d0>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d816      	bhi.n	8005a24 <UART_SetConfig+0xb8>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0x90>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a19 	.word	0x08005a19
 8005a04:	08005a13 	.word	0x08005a13
 8005a08:	08005a1f 	.word	0x08005a1f
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e14f      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e14c      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e149      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e146      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e143      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a84      	ldr	r2, [pc, #528]	; (8005c40 <UART_SetConfig+0x2d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d132      	bne.n	8005a9a <UART_SetConfig+0x12e>
 8005a34:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d828      	bhi.n	8005a94 <UART_SetConfig+0x128>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0xdc>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a7d 	.word	0x08005a7d
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a95 	.word	0x08005a95
 8005a54:	08005a95 	.word	0x08005a95
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005a95 	.word	0x08005a95
 8005a68:	08005a83 	.word	0x08005a83
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a95 	.word	0x08005a95
 8005a78:	08005a8f 	.word	0x08005a8f
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e117      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a82:	2302      	movs	r3, #2
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e114      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e111      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a8e:	2308      	movs	r3, #8
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e10e      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a94:	2310      	movs	r3, #16
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e10b      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a69      	ldr	r2, [pc, #420]	; (8005c44 <UART_SetConfig+0x2d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d120      	bne.n	8005ae6 <UART_SetConfig+0x17a>
 8005aa4:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d013      	beq.n	8005ada <UART_SetConfig+0x16e>
 8005ab2:	2b30      	cmp	r3, #48	; 0x30
 8005ab4:	d814      	bhi.n	8005ae0 <UART_SetConfig+0x174>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d009      	beq.n	8005ace <UART_SetConfig+0x162>
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d810      	bhi.n	8005ae0 <UART_SetConfig+0x174>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <UART_SetConfig+0x15c>
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d006      	beq.n	8005ad4 <UART_SetConfig+0x168>
 8005ac6:	e00b      	b.n	8005ae0 <UART_SetConfig+0x174>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0f1      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e0ee      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e0eb      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ada:	2308      	movs	r3, #8
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e0e8      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e0e5      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <UART_SetConfig+0x2dc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d120      	bne.n	8005b32 <UART_SetConfig+0x1c6>
 8005af0:	4b52      	ldr	r3, [pc, #328]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005afa:	2bc0      	cmp	r3, #192	; 0xc0
 8005afc:	d013      	beq.n	8005b26 <UART_SetConfig+0x1ba>
 8005afe:	2bc0      	cmp	r3, #192	; 0xc0
 8005b00:	d814      	bhi.n	8005b2c <UART_SetConfig+0x1c0>
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d009      	beq.n	8005b1a <UART_SetConfig+0x1ae>
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d810      	bhi.n	8005b2c <UART_SetConfig+0x1c0>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <UART_SetConfig+0x1a8>
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d006      	beq.n	8005b20 <UART_SetConfig+0x1b4>
 8005b12:	e00b      	b.n	8005b2c <UART_SetConfig+0x1c0>
 8005b14:	2300      	movs	r3, #0
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e0cb      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e0c8      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b20:	2304      	movs	r3, #4
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e0c5      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b26:	2308      	movs	r3, #8
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e0c2      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e0bf      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a45      	ldr	r2, [pc, #276]	; (8005c4c <UART_SetConfig+0x2e0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d125      	bne.n	8005b88 <UART_SetConfig+0x21c>
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4a:	d017      	beq.n	8005b7c <UART_SetConfig+0x210>
 8005b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b50:	d817      	bhi.n	8005b82 <UART_SetConfig+0x216>
 8005b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b56:	d00b      	beq.n	8005b70 <UART_SetConfig+0x204>
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d811      	bhi.n	8005b82 <UART_SetConfig+0x216>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <UART_SetConfig+0x1fe>
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d006      	beq.n	8005b76 <UART_SetConfig+0x20a>
 8005b68:	e00b      	b.n	8005b82 <UART_SetConfig+0x216>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e0a0      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b70:	2302      	movs	r3, #2
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e09d      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b76:	2304      	movs	r3, #4
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e09a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e097      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b82:	2310      	movs	r3, #16
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e094      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <UART_SetConfig+0x2e4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d125      	bne.n	8005bde <UART_SetConfig+0x272>
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba0:	d017      	beq.n	8005bd2 <UART_SetConfig+0x266>
 8005ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba6:	d817      	bhi.n	8005bd8 <UART_SetConfig+0x26c>
 8005ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bac:	d00b      	beq.n	8005bc6 <UART_SetConfig+0x25a>
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d811      	bhi.n	8005bd8 <UART_SetConfig+0x26c>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <UART_SetConfig+0x254>
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbc:	d006      	beq.n	8005bcc <UART_SetConfig+0x260>
 8005bbe:	e00b      	b.n	8005bd8 <UART_SetConfig+0x26c>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e075      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e072      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e06f      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e06c      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e069      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <UART_SetConfig+0x2e8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d137      	bne.n	8005c58 <UART_SetConfig+0x2ec>
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <UART_SetConfig+0x2d0>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf6:	d017      	beq.n	8005c28 <UART_SetConfig+0x2bc>
 8005bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfc:	d817      	bhi.n	8005c2e <UART_SetConfig+0x2c2>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d00b      	beq.n	8005c1c <UART_SetConfig+0x2b0>
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d811      	bhi.n	8005c2e <UART_SetConfig+0x2c2>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <UART_SetConfig+0x2aa>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d006      	beq.n	8005c22 <UART_SetConfig+0x2b6>
 8005c14:	e00b      	b.n	8005c2e <UART_SetConfig+0x2c2>
 8005c16:	2300      	movs	r3, #0
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e04a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e047      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c22:	2304      	movs	r3, #4
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e044      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e041      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c2e:	2310      	movs	r3, #16
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e03e      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c34:	efff69f3 	.word	0xefff69f3
 8005c38:	40011000 	.word	0x40011000
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	40004400 	.word	0x40004400
 8005c44:	40004800 	.word	0x40004800
 8005c48:	40004c00 	.word	0x40004c00
 8005c4c:	40005000 	.word	0x40005000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	40007800 	.word	0x40007800
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a71      	ldr	r2, [pc, #452]	; (8005e24 <UART_SetConfig+0x4b8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d125      	bne.n	8005cae <UART_SetConfig+0x342>
 8005c62:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <UART_SetConfig+0x4bc>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c70:	d017      	beq.n	8005ca2 <UART_SetConfig+0x336>
 8005c72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c76:	d817      	bhi.n	8005ca8 <UART_SetConfig+0x33c>
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7c:	d00b      	beq.n	8005c96 <UART_SetConfig+0x32a>
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	d811      	bhi.n	8005ca8 <UART_SetConfig+0x33c>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <UART_SetConfig+0x324>
 8005c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8c:	d006      	beq.n	8005c9c <UART_SetConfig+0x330>
 8005c8e:	e00b      	b.n	8005ca8 <UART_SetConfig+0x33c>
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e00d      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c96:	2302      	movs	r3, #2
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e00a      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e007      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e004      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e001      	b.n	8005cb2 <UART_SetConfig+0x346>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d15b      	bne.n	8005d74 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d827      	bhi.n	8005d12 <UART_SetConfig+0x3a6>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0x35c>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe f86e 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61b8      	str	r0, [r7, #24]
        break;
 8005cf2:	e013      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fe f87e 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	61b8      	str	r0, [r7, #24]
        break;
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <UART_SetConfig+0x4c0>)
 8005cfe:	61bb      	str	r3, [r7, #24]
        break;
 8005d00:	e00c      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fd ff75 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8005d06:	61b8      	str	r0, [r7, #24]
        break;
 8005d08:	e008      	b.n	8005d1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	61bb      	str	r3, [r7, #24]
        break;
 8005d10:	e004      	b.n	8005d1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	77bb      	strb	r3, [r7, #30]
        break;
 8005d1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d074      	beq.n	8005e0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	005a      	lsls	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d916      	bls.n	8005d6e <UART_SetConfig+0x402>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d212      	bcs.n	8005d6e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f023 030f 	bic.w	r3, r3, #15
 8005d50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	89fa      	ldrh	r2, [r7, #14]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	e04e      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	77bb      	strb	r3, [r7, #30]
 8005d72:	e04b      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d827      	bhi.n	8005dca <UART_SetConfig+0x45e>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x414>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005db5 	.word	0x08005db5
 8005d8c:	08005dcb 	.word	0x08005dcb
 8005d90:	08005dbb 	.word	0x08005dbb
 8005d94:	08005dcb 	.word	0x08005dcb
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005dcb 	.word	0x08005dcb
 8005da0:	08005dc3 	.word	0x08005dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fe f812 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8005da8:	61b8      	str	r0, [r7, #24]
        break;
 8005daa:	e013      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dac:	f7fe f822 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8005db0:	61b8      	str	r0, [r7, #24]
        break;
 8005db2:	e00f      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <UART_SetConfig+0x4c0>)
 8005db6:	61bb      	str	r3, [r7, #24]
        break;
 8005db8:	e00c      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dba:	f7fd ff19 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8005dbe:	61b8      	str	r0, [r7, #24]
        break;
 8005dc0:	e008      	b.n	8005dd4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	61bb      	str	r3, [r7, #24]
        break;
 8005dc8:	e004      	b.n	8005dd4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085a      	lsrs	r2, r3, #1
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d908      	bls.n	8005e08 <UART_SetConfig+0x49c>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d204      	bcs.n	8005e08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	e001      	b.n	8005e0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40007c00 	.word	0x40007c00
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	00f42400 	.word	0x00f42400

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f84:	f7fb f844 	bl	8001010 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82d 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e023      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f817 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00d      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006016:	e05e      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d05a      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006020:	f7fa fff6 	bl	8001010 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	429a      	cmp	r2, r3
 800602e:	d302      	bcc.n	8006036 <UART_WaitOnFlagUntilTimeout+0x30>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11b      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006044:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e043      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02c      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608a:	d124      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e00f      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4013      	ands	r3, r2
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d091      	beq.n	8006018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006114:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0201 	bic.w	r2, r2, #1
 8006124:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0210 	bic.w	r2, r2, #16
 800613c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fbd6 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff fbb3 	bl	8005918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061bc:	b084      	sub	sp, #16
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	f107 001c 	add.w	r0, r7, #28
 80061ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d120      	bne.n	8006216 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <USB_CoreInit+0xac>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fad6 	bl	80077bc <USB_CoreReset>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e010      	b.n	8006238 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 faca 	bl	80077bc <USB_CoreReset>
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10b      	bne.n	8006256 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f043 0206 	orr.w	r2, r3, #6
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006262:	b004      	add	sp, #16
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	ffbdffbf 	.word	0xffbdffbf

0800626c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d165      	bne.n	800634c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a41      	ldr	r2, [pc, #260]	; (8006388 <USB_SetTurnaroundTime+0x11c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d906      	bls.n	8006296 <USB_SetTurnaroundTime+0x2a>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a40      	ldr	r2, [pc, #256]	; (800638c <USB_SetTurnaroundTime+0x120>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d202      	bcs.n	8006296 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006290:	230f      	movs	r3, #15
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e062      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a3c      	ldr	r2, [pc, #240]	; (800638c <USB_SetTurnaroundTime+0x120>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d306      	bcc.n	80062ac <USB_SetTurnaroundTime+0x40>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4a3b      	ldr	r2, [pc, #236]	; (8006390 <USB_SetTurnaroundTime+0x124>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d202      	bcs.n	80062ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062a6:	230e      	movs	r3, #14
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e057      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a38      	ldr	r2, [pc, #224]	; (8006390 <USB_SetTurnaroundTime+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d306      	bcc.n	80062c2 <USB_SetTurnaroundTime+0x56>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a37      	ldr	r2, [pc, #220]	; (8006394 <USB_SetTurnaroundTime+0x128>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d202      	bcs.n	80062c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062bc:	230d      	movs	r3, #13
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e04c      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a33      	ldr	r2, [pc, #204]	; (8006394 <USB_SetTurnaroundTime+0x128>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d306      	bcc.n	80062d8 <USB_SetTurnaroundTime+0x6c>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4a32      	ldr	r2, [pc, #200]	; (8006398 <USB_SetTurnaroundTime+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d802      	bhi.n	80062d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062d2:	230c      	movs	r3, #12
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e041      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <USB_SetTurnaroundTime+0x12c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d906      	bls.n	80062ee <USB_SetTurnaroundTime+0x82>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a2e      	ldr	r2, [pc, #184]	; (800639c <USB_SetTurnaroundTime+0x130>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d802      	bhi.n	80062ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062e8:	230b      	movs	r3, #11
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e036      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <USB_SetTurnaroundTime+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d906      	bls.n	8006304 <USB_SetTurnaroundTime+0x98>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <USB_SetTurnaroundTime+0x134>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d802      	bhi.n	8006304 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062fe:	230a      	movs	r3, #10
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e02b      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4a26      	ldr	r2, [pc, #152]	; (80063a0 <USB_SetTurnaroundTime+0x134>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d906      	bls.n	800631a <USB_SetTurnaroundTime+0xae>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4a25      	ldr	r2, [pc, #148]	; (80063a4 <USB_SetTurnaroundTime+0x138>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d202      	bcs.n	800631a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006314:	2309      	movs	r3, #9
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e020      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <USB_SetTurnaroundTime+0x138>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d306      	bcc.n	8006330 <USB_SetTurnaroundTime+0xc4>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <USB_SetTurnaroundTime+0x13c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d802      	bhi.n	8006330 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800632a:	2308      	movs	r3, #8
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e015      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <USB_SetTurnaroundTime+0x13c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d906      	bls.n	8006346 <USB_SetTurnaroundTime+0xda>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <USB_SetTurnaroundTime+0x140>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d202      	bcs.n	8006346 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006340:	2307      	movs	r3, #7
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e00a      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006346:	2306      	movs	r3, #6
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e007      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006352:	2309      	movs	r3, #9
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e001      	b.n	800635c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006358:	2309      	movs	r3, #9
 800635a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006374:	431a      	orrs	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	00d8acbf 	.word	0x00d8acbf
 800638c:	00e4e1c0 	.word	0x00e4e1c0
 8006390:	00f42400 	.word	0x00f42400
 8006394:	01067380 	.word	0x01067380
 8006398:	011a499f 	.word	0x011a499f
 800639c:	01312cff 	.word	0x01312cff
 80063a0:	014ca43f 	.word	0x014ca43f
 80063a4:	016e3600 	.word	0x016e3600
 80063a8:	01a6ab1f 	.word	0x01a6ab1f
 80063ac:	01e84800 	.word	0x01e84800

080063b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f043 0201 	orr.w	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d106      	bne.n	8006420 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	e00b      	b.n	8006438 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	e001      	b.n	8006438 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e003      	b.n	8006440 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006438:	2032      	movs	r0, #50	; 0x32
 800643a:	f7fa fdf5 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006448:	b084      	sub	sp, #16
 800644a:	b580      	push	{r7, lr}
 800644c:	b086      	sub	sp, #24
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	e009      	b.n	800647c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3340      	adds	r3, #64	; 0x40
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	2200      	movs	r2, #0
 8006474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b0e      	cmp	r3, #14
 8006480:	d9f2      	bls.n	8006468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11c      	bne.n	80064c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e005      	b.n	80064ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d4:	461a      	mov	r2, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	4619      	mov	r1, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	461a      	mov	r2, r3
 80064ea:	680b      	ldr	r3, [r1, #0]
 80064ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10c      	bne.n	800650e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064fa:	2100      	movs	r1, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f959 	bl	80067b4 <USB_SetDevSpeed>
 8006502:	e018      	b.n	8006536 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006504:	2101      	movs	r1, #1
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f954 	bl	80067b4 <USB_SetDevSpeed>
 800650c:	e013      	b.n	8006536 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b03      	cmp	r3, #3
 8006512:	d10c      	bne.n	800652e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800651a:	2100      	movs	r1, #0
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f949 	bl	80067b4 <USB_SetDevSpeed>
 8006522:	e008      	b.n	8006536 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006524:	2101      	movs	r1, #1
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f944 	bl	80067b4 <USB_SetDevSpeed>
 800652c:	e003      	b.n	8006536 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800652e:	2103      	movs	r1, #3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f93f 	bl	80067b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006536:	2110      	movs	r1, #16
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8f3 	bl	8006724 <USB_FlushTxFifo>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f911 	bl	8006770 <USB_FlushRxFifo>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	461a      	mov	r2, r3
 800656c:	2300      	movs	r3, #0
 800656e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	e043      	b.n	800660a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d118      	bne.n	80065cc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	461a      	mov	r2, r3
 80065ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e013      	b.n	80065de <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	461a      	mov	r2, r3
 80065c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e008      	b.n	80065de <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	461a      	mov	r2, r3
 80065fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3301      	adds	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d3b7      	bcc.n	8006582 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e043      	b.n	80066a0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662e:	d118      	bne.n	8006662 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e013      	b.n	8006674 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	461a      	mov	r2, r3
 800665a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e008      	b.n	8006674 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	461a      	mov	r2, r3
 8006694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3301      	adds	r3, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3b7      	bcc.n	8006618 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <USB_DevInit+0x2d4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d105      	bne.n	800670c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <USB_DevInit+0x2d8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006718:	b004      	add	sp, #16
 800671a:	4770      	bx	lr
 800671c:	803c3800 	.word	0x803c3800
 8006720:	40000004 	.word	0x40000004

08006724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	019b      	lsls	r3, r3, #6
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <USB_FlushTxFifo+0x48>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e006      	b.n	800675e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d0f0      	beq.n	800673e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	00030d40 	.word	0x00030d40

08006770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2210      	movs	r2, #16
 8006780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <USB_FlushRxFifo+0x40>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d901      	bls.n	8006794 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e006      	b.n	80067a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b10      	cmp	r3, #16
 800679e:	d0f0      	beq.n	8006782 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	00030d40 	.word	0x00030d40

080067b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d4:	4313      	orrs	r3, r2
 80067d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0306 	and.w	r3, r3, #6
 80067fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
 800680a:	e00a      	b.n	8006822 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d002      	beq.n	8006818 <USB_GetDevSpeed+0x32>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b06      	cmp	r3, #6
 8006816:	d102      	bne.n	800681e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006818:	2302      	movs	r3, #2
 800681a:	75fb      	strb	r3, [r7, #23]
 800681c:	e001      	b.n	8006822 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800681e:	230f      	movs	r3, #15
 8006820:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d139      	bne.n	80068c0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	2101      	movs	r1, #1
 800685e:	fa01 f303 	lsl.w	r3, r1, r3
 8006862:	b29b      	uxth	r3, r3
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686a:	4313      	orrs	r3, r2
 800686c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d153      	bne.n	800692c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	059b      	lsls	r3, r3, #22
 80068a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0159      	lsls	r1, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	4619      	mov	r1, r3
 80068b8:	4b20      	ldr	r3, [pc, #128]	; (800693c <USB_ActivateEndpoint+0x10c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	e035      	b.n	800692c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	2101      	movs	r1, #1
 80068d2:	fa01 f303 	lsl.w	r3, r1, r3
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	68f9      	ldr	r1, [r7, #12]
 80068da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068de:	4313      	orrs	r3, r2
 80068e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d119      	bne.n	800692c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	78db      	ldrb	r3, [r3, #3]
 8006912:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006914:	430b      	orrs	r3, r1
 8006916:	431a      	orrs	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	0159      	lsls	r1, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	440b      	add	r3, r1
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	4619      	mov	r1, r3
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <USB_ActivateEndpoint+0x10c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	10008000 	.word	0x10008000

08006940 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d161      	bne.n	8006a20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006972:	d11f      	bne.n	80069b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006992:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	2101      	movs	r1, #1
 80069c6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d4:	4013      	ands	r3, r2
 80069d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	2101      	movs	r1, #1
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069f8:	4013      	ands	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	0159      	lsls	r1, r3, #5
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	440b      	add	r3, r1
 8006a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a16:	4619      	mov	r1, r3
 8006a18:	4b35      	ldr	r3, [pc, #212]	; (8006af0 <USB_DeactivateEndpoint+0x1b0>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]
 8006a1e:	e060      	b.n	8006ae2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a36:	d11f      	bne.n	8006a78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	43db      	mvns	r3, r3
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a98:	4013      	ands	r3, r2
 8006a9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006abc:	4013      	ands	r3, r2
 8006abe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	0159      	lsls	r1, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	440b      	add	r3, r1
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ada:	4619      	mov	r1, r3
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <USB_DeactivateEndpoint+0x1b4>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	ec337800 	.word	0xec337800
 8006af4:	eff37800 	.word	0xeff37800

08006af8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	f040 8163 	bne.w	8006de0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d132      	bne.n	8006b88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	0159      	lsls	r1, r3, #5
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	440b      	add	r3, r1
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4ba5      	ldr	r3, [pc, #660]	; (8006dd4 <USB_EPStartXfer+0x2dc>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	0159      	lsls	r1, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	440b      	add	r3, r1
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4b95      	ldr	r3, [pc, #596]	; (8006dd8 <USB_EPStartXfer+0x2e0>)
 8006b82:	4013      	ands	r3, r2
 8006b84:	610b      	str	r3, [r1, #16]
 8006b86:	e074      	b.n	8006c72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	0159      	lsls	r1, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4b8c      	ldr	r3, [pc, #560]	; (8006dd8 <USB_EPStartXfer+0x2e0>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	0159      	lsls	r1, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4b83      	ldr	r3, [pc, #524]	; (8006dd4 <USB_EPStartXfer+0x2dc>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6959      	ldr	r1, [r3, #20]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	440b      	add	r3, r1
 8006be4:	1e59      	subs	r1, r3, #1
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bee:	04d9      	lsls	r1, r3, #19
 8006bf0:	4b7a      	ldr	r3, [pc, #488]	; (8006ddc <USB_EPStartXfer+0x2e4>)
 8006bf2:	400b      	ands	r3, r1
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	0148      	lsls	r0, r1, #5
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	4401      	add	r1, r0
 8006bfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c00:	4313      	orrs	r3, r2
 8006c02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	0148      	lsls	r0, r1, #5
 8006c1e:	69f9      	ldr	r1, [r7, #28]
 8006c20:	4401      	add	r1, r0
 8006c22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c26:	4313      	orrs	r3, r2
 8006c28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	78db      	ldrb	r3, [r3, #3]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d11f      	bne.n	8006c72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d14b      	bne.n	8006d10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d128      	bne.n	8006cee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d110      	bne.n	8006cce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e00f      	b.n	8006cee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	e133      	b.n	8006f78 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	78db      	ldrb	r3, [r3, #3]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d015      	beq.n	8006d64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 811b 	beq.w	8006f78 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	2101      	movs	r1, #1
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	634b      	str	r3, [r1, #52]	; 0x34
 8006d62:	e109      	b.n	8006f78 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d110      	bne.n	8006d96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e00f      	b.n	8006db6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	68d9      	ldr	r1, [r3, #12]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	b298      	uxth	r0, r3
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	4603      	mov	r3, r0
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fa38 	bl	8007240 <USB_WritePacket>
 8006dd0:	e0d2      	b.n	8006f78 <USB_EPStartXfer+0x480>
 8006dd2:	bf00      	nop
 8006dd4:	e007ffff 	.word	0xe007ffff
 8006dd8:	fff80000 	.word	0xfff80000
 8006ddc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	0159      	lsls	r1, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	440b      	add	r3, r1
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4b61      	ldr	r3, [pc, #388]	; (8006f84 <USB_EPStartXfer+0x48c>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	0159      	lsls	r1, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	440b      	add	r3, r1
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4b5a      	ldr	r3, [pc, #360]	; (8006f88 <USB_EPStartXfer+0x490>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d123      	bne.n	8006e74 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e42:	69b9      	ldr	r1, [r7, #24]
 8006e44:	0148      	lsls	r0, r1, #5
 8006e46:	69f9      	ldr	r1, [r7, #28]
 8006e48:	4401      	add	r1, r0
 8006e4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e70:	6113      	str	r3, [r2, #16]
 8006e72:	e033      	b.n	8006edc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	1e5a      	subs	r2, r3, #1
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	8afb      	ldrh	r3, [r7, #22]
 8006e9a:	04d9      	lsls	r1, r3, #19
 8006e9c:	4b3b      	ldr	r3, [pc, #236]	; (8006f8c <USB_EPStartXfer+0x494>)
 8006e9e:	400b      	ands	r3, r1
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	0148      	lsls	r0, r1, #5
 8006ea4:	69f9      	ldr	r1, [r7, #28]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eac:	4313      	orrs	r3, r2
 8006eae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	8af9      	ldrh	r1, [r7, #22]
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ecc:	69b9      	ldr	r1, [r7, #24]
 8006ece:	0148      	lsls	r0, r1, #5
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	4401      	add	r1, r0
 8006ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10d      	bne.n	8006efe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68d9      	ldr	r1, [r3, #12]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	460a      	mov	r2, r1
 8006efc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d128      	bne.n	8006f58 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d110      	bne.n	8006f38 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	e00f      	b.n	8006f58 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	fff80000 	.word	0xfff80000
 8006f88:	e007ffff 	.word	0xe007ffff
 8006f8c:	1ff80000 	.word	0x1ff80000

08006f90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	f040 80cd 	bne.w	800714c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d132      	bne.n	8007020 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	0159      	lsls	r1, r3, #5
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4b98      	ldr	r3, [pc, #608]	; (8007238 <USB_EP0StartXfer+0x2a8>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	0159      	lsls	r1, r3, #5
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	440b      	add	r3, r1
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	4619      	mov	r1, r3
 8007018:	4b88      	ldr	r3, [pc, #544]	; (800723c <USB_EP0StartXfer+0x2ac>)
 800701a:	4013      	ands	r3, r2
 800701c:	610b      	str	r3, [r1, #16]
 800701e:	e04e      	b.n	80070be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	0159      	lsls	r1, r3, #5
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	440b      	add	r3, r1
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	4619      	mov	r1, r3
 800703c:	4b7f      	ldr	r3, [pc, #508]	; (800723c <USB_EP0StartXfer+0x2ac>)
 800703e:	4013      	ands	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	0159      	lsls	r1, r3, #5
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	440b      	add	r3, r1
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	4619      	mov	r1, r3
 800705e:	4b76      	ldr	r3, [pc, #472]	; (8007238 <USB_EP0StartXfer+0x2a8>)
 8007060:	4013      	ands	r3, r2
 8007062:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	d903      	bls.n	8007078 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	6939      	ldr	r1, [r7, #16]
 80070b0:	0148      	lsls	r0, r1, #5
 80070b2:	6979      	ldr	r1, [r7, #20]
 80070b4:	4401      	add	r1, r0
 80070b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d11e      	bne.n	8007102 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	461a      	mov	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	e092      	b.n	8007228 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	440a      	add	r2, r1
 8007118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007120:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d07e      	beq.n	8007228 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	2101      	movs	r1, #1
 800713c:	fa01 f303 	lsl.w	r3, r1, r3
 8007140:	6979      	ldr	r1, [r7, #20]
 8007142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007146:	4313      	orrs	r3, r2
 8007148:	634b      	str	r3, [r1, #52]	; 0x34
 800714a:	e06d      	b.n	8007228 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	0159      	lsls	r1, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	440b      	add	r3, r1
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	4619      	mov	r1, r3
 8007168:	4b34      	ldr	r3, [pc, #208]	; (800723c <USB_EP0StartXfer+0x2ac>)
 800716a:	4013      	ands	r3, r2
 800716c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	0159      	lsls	r1, r3, #5
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	440b      	add	r3, r1
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	4619      	mov	r1, r3
 800718a:	4b2b      	ldr	r3, [pc, #172]	; (8007238 <USB_EP0StartXfer+0x2a8>)
 800718c:	4013      	ands	r3, r2
 800718e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d6:	6939      	ldr	r1, [r7, #16]
 80071d8:	0148      	lsls	r0, r1, #5
 80071da:	6979      	ldr	r1, [r7, #20]
 80071dc:	4401      	add	r1, r0
 80071de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071e2:	4313      	orrs	r3, r2
 80071e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d10d      	bne.n	8007208 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	68d9      	ldr	r1, [r3, #12]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	460a      	mov	r2, r1
 8007206:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	440a      	add	r2, r1
 800721e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	e007ffff 	.word	0xe007ffff
 800723c:	fff80000 	.word	0xfff80000

08007240 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	460b      	mov	r3, r1
 8007250:	71fb      	strb	r3, [r7, #7]
 8007252:	4613      	mov	r3, r2
 8007254:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800725e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d11a      	bne.n	800729c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007266:	88bb      	ldrh	r3, [r7, #4]
 8007268:	3303      	adds	r3, #3
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e00f      	b.n	8007294 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	031a      	lsls	r2, r3, #12
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	4413      	add	r3, r2
 800727c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007280:	461a      	mov	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3304      	adds	r3, #4
 800728c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	3301      	adds	r3, #1
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	429a      	cmp	r2, r3
 800729a:	d3eb      	bcc.n	8007274 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b089      	sub	sp, #36	; 0x24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	3303      	adds	r3, #3
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e00b      	b.n	80072e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	3304      	adds	r3, #4
 80072de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d3ef      	bcc.n	80072ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80072ee:	69fb      	ldr	r3, [r7, #28]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3724      	adds	r7, #36	; 0x24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d12c      	bne.n	8007372 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	db12      	blt.n	8007350 <USB_EPSetStall+0x54>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00f      	beq.n	8007350 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800734e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	e02b      	b.n	80073ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db12      	blt.n	80073aa <USB_EPSetStall+0xae>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00f      	beq.n	80073aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d128      	bne.n	8007446 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007412:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	78db      	ldrb	r3, [r3, #3]
 8007418:	2b03      	cmp	r3, #3
 800741a:	d003      	beq.n	8007424 <USB_EPClearStall+0x4c>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	78db      	ldrb	r3, [r3, #3]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d138      	bne.n	8007496 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	e027      	b.n	8007496 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007464:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d003      	beq.n	8007476 <USB_EPClearStall+0x9e>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	78db      	ldrb	r3, [r3, #3]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d10f      	bne.n	8007496 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074de:	4313      	orrs	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800751e:	f023 0302 	bic.w	r3, r3, #2
 8007522:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800754c:	f023 0303 	bic.w	r3, r3, #3
 8007550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4013      	ands	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800758c:	68fb      	ldr	r3, [r7, #12]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	0c1b      	lsrs	r3, r3, #16
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4013      	ands	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	b29b      	uxth	r3, r3
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4013      	ands	r3, r2
 800762e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007630:	68bb      	ldr	r3, [r7, #8]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4013      	ands	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800768c:	68bb      	ldr	r3, [r7, #8]
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0301 	and.w	r3, r3, #1
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	4619      	mov	r1, r3
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <USB_ActivateSetup+0x44>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	fffff800 	.word	0xfffff800

08007700 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	460b      	mov	r3, r1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	333c      	adds	r3, #60	; 0x3c
 8007716:	3304      	adds	r3, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <USB_EP0_OutStart+0xb8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d90a      	bls.n	800773a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d101      	bne.n	800773a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	e037      	b.n	80077aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007768:	f043 0318 	orr.w	r3, r3, #24
 800776c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007780:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10f      	bne.n	80077a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80077a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	4f54300a 	.word	0x4f54300a

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <USB_CoreReset+0x64>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e01b      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	daf2      	bge.n	80077c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f043 0201 	orr.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a09      	ldr	r2, [pc, #36]	; (8007820 <USB_CoreReset+0x64>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d0f0      	beq.n	80077f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	00030d40 	.word	0x00030d40

08007824 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007830:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007834:	f002 fdaa 	bl	800a38c <malloc>
 8007838:	4603      	mov	r3, r0
 800783a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800784a:	2302      	movs	r3, #2
 800784c:	e066      	b.n	800791c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d119      	bne.n	8007892 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007862:	2202      	movs	r2, #2
 8007864:	2181      	movs	r1, #129	; 0x81
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 ffb5 	bl	80097d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007876:	2202      	movs	r2, #2
 8007878:	2101      	movs	r1, #1
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 ffab 	bl	80097d6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2210      	movs	r2, #16
 800788c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007890:	e016      	b.n	80078c0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	2202      	movs	r2, #2
 8007896:	2181      	movs	r1, #129	; 0x81
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 ff9c 	bl	80097d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078a4:	2340      	movs	r3, #64	; 0x40
 80078a6:	2202      	movs	r2, #2
 80078a8:	2101      	movs	r1, #1
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 ff93 	bl	80097d6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2210      	movs	r2, #16
 80078bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078c0:	2308      	movs	r3, #8
 80078c2:	2203      	movs	r2, #3
 80078c4:	2182      	movs	r1, #130	; 0x82
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 ff85 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7c1b      	ldrb	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007900:	2101      	movs	r1, #1
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 f856 	bl	80099b4 <USBD_LL_PrepareReceive>
 8007908:	e007      	b.n	800791a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007910:	2340      	movs	r3, #64	; 0x40
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f002 f84d 	bl	80099b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007934:	2181      	movs	r1, #129	; 0x81
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 ff73 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007942:	2101      	movs	r1, #1
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 ff6c 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007952:	2182      	movs	r1, #130	; 0x82
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 ff64 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007984:	4618      	mov	r0, r3
 8007986:	f002 fd09 	bl	800a39c <free>
    pdev->pClassData = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d03a      	beq.n	8007a3c <USBD_CDC_Setup+0xa0>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	f040 8097 	bne.w	8007afa <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	88db      	ldrh	r3, [r3, #6]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d029      	beq.n	8007a28 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b25b      	sxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da11      	bge.n	8007a02 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80079ea:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	88d2      	ldrh	r2, [r2, #6]
 80079f0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079f2:	6939      	ldr	r1, [r7, #16]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 faa6 	bl	8008f4c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007a00:	e082      	b.n	8007b08 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	785a      	ldrb	r2, [r3, #1]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a18:	6939      	ldr	r1, [r7, #16]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fabf 	bl	8008fa4 <USBD_CtlPrepareRx>
    break;
 8007a26:	e06f      	b.n	8007b08 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	7850      	ldrb	r0, [r2, #1]
 8007a34:	2200      	movs	r2, #0
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	4798      	blx	r3
    break;
 8007a3a:	e065      	b.n	8007b08 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b0b      	cmp	r3, #11
 8007a42:	d84f      	bhi.n	8007ae4 <USBD_CDC_Setup+0x148>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_CDC_Setup+0xb0>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a7d 	.word	0x08007a7d
 8007a50:	08007af3 	.word	0x08007af3
 8007a54:	08007ae5 	.word	0x08007ae5
 8007a58:	08007ae5 	.word	0x08007ae5
 8007a5c:	08007ae5 	.word	0x08007ae5
 8007a60:	08007ae5 	.word	0x08007ae5
 8007a64:	08007ae5 	.word	0x08007ae5
 8007a68:	08007ae5 	.word	0x08007ae5
 8007a6c:	08007ae5 	.word	0x08007ae5
 8007a70:	08007ae5 	.word	0x08007ae5
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007acd 	.word	0x08007acd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d107      	bne.n	8007a96 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fa5c 	bl	8008f4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a94:	e030      	b.n	8007af8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f9e6 	bl	8008e6a <USBD_CtlError>
        ret = USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa2:	e029      	b.n	8007af8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d107      	bne.n	8007abe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007aae:	f107 030f 	add.w	r3, r7, #15
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fa48 	bl	8008f4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007abc:	e01c      	b.n	8007af8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f9d2 	bl	8008e6a <USBD_CtlError>
        ret = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aca:	e015      	b.n	8007af8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d00f      	beq.n	8007af6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f9c6 	bl	8008e6a <USBD_CtlError>
        ret = USBD_FAIL;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007ae2:	e008      	b.n	8007af6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f9bf 	bl	8008e6a <USBD_CtlError>
      ret = USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	75fb      	strb	r3, [r7, #23]
      break;
 8007af0:	e002      	b.n	8007af8 <USBD_CDC_Setup+0x15c>
      break;
 8007af2:	bf00      	nop
 8007af4:	e008      	b.n	8007b08 <USBD_CDC_Setup+0x16c>
      break;
 8007af6:	bf00      	nop
    }
    break;
 8007af8:	e006      	b.n	8007b08 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f9b4 	bl	8008e6a <USBD_CtlError>
    ret = USBD_FAIL;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
    break;
 8007b06:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop

08007b14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e049      	b.n	8007bca <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d029      	beq.n	8007ba8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	3318      	adds	r3, #24
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	78f9      	ldrb	r1, [r7, #3]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4403      	add	r3, r0
 8007b74:	3344      	adds	r3, #68	; 0x44
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b7c:	fb03 f301 	mul.w	r3, r3, r1
 8007b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d110      	bne.n	8007ba8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3318      	adds	r3, #24
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b9a:	78f9      	ldrb	r1, [r7, #3]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fee6 	bl	8009972 <USBD_LL_Transmit>
 8007ba6:	e00f      	b.n	8007bc8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e015      	b.n	8007c20 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fefc 	bl	80099f6 <USBD_LL_GetRxDataSize>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c36:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <USBD_CDC_EP0_RxReady+0x46>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c48:	2bff      	cmp	r3, #255	; 0xff
 8007c4a:	d010      	beq.n	8007c6e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c5a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c62:	b292      	uxth	r2, r2
 8007c64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	22ff      	movs	r2, #255	; 0xff
 8007c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2243      	movs	r2, #67	; 0x43
 8007c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c86:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20000094 	.word	0x20000094

08007c98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2243      	movs	r2, #67	; 0x43
 8007ca4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007ca6:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	20000050 	.word	0x20000050

08007cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2243      	movs	r2, #67	; 0x43
 8007cc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	200000d8 	.word	0x200000d8

08007cd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	220a      	movs	r2, #10
 8007ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	2000000c 	.word	0x2000000c

08007cf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e004      	b.n	8007d16 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e016      	b.n	8007dc8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7c1b      	ldrb	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dac:	2101      	movs	r1, #1
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 fe00 	bl	80099b4 <USBD_LL_PrepareReceive>
 8007db4:	e007      	b.n	8007dc6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fdf7 	bl	80099b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e025      	b.n	8007e34 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	79fa      	ldrb	r2, [r7, #7]
 8007e26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f001 fc6d 	bl	8009708 <USBD_LL_Init>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e010      	b.n	8007e76 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	f107 020e 	add.w	r2, r7, #14
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fc8a 	bl	80097a0 <USBD_LL_Start>
 8007e8c:	4603      	mov	r3, r0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d007      	beq.n	8007f0a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
  }

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 ff65 	bl	8008df6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d01a      	beq.n	8007f86 <USBD_LL_SetupStage+0x72>
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d822      	bhi.n	8007f9a <USBD_LL_SetupStage+0x86>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_LL_SetupStage+0x4a>
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d00a      	beq.n	8007f72 <USBD_LL_SetupStage+0x5e>
 8007f5c:	e01d      	b.n	8007f9a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa18 	bl	800839c <USBD_StdDevReq>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f70:	e020      	b.n	8007fb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa7c 	bl	8008478 <USBD_StdItfReq>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e016      	b.n	8007fb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 faba 	bl	8008508 <USBD_StdEPReq>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	e00c      	b.n	8007fb4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fc59 	bl	8009860 <USBD_LL_StallEP>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb2:	bf00      	nop
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b086      	sub	sp, #24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d137      	bne.n	8008042 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d14a      	bne.n	800807a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d913      	bls.n	8008018 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	1ad2      	subs	r2, r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	4293      	cmp	r3, r2
 8008008:	bf28      	it	cs
 800800a:	4613      	movcs	r3, r2
 800800c:	461a      	mov	r2, r3
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 ffe4 	bl	8008fde <USBD_CtlContinueRx>
 8008016:	e030      	b.n	800807a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800802a:	2b03      	cmp	r3, #3
 800802c:	d105      	bne.n	800803a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 ffe0 	bl	8009000 <USBD_CtlSendStatus>
 8008040:	e01b      	b.n	800807a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d013      	beq.n	8008076 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008054:	2b03      	cmp	r3, #3
 8008056:	d10e      	bne.n	8008076 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	7afa      	ldrb	r2, [r7, #11]
 8008062:	4611      	mov	r1, r2
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	4798      	blx	r3
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	e002      	b.n	800807c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	e000      	b.n	800807c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	460b      	mov	r3, r1
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d16a      	bne.n	800816e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3314      	adds	r3, #20
 800809c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d155      	bne.n	8008154 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d914      	bls.n	80080de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	1ad2      	subs	r2, r2, r3
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	461a      	mov	r2, r3
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 ff59 	bl	8008f82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080d0:	2300      	movs	r3, #0
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f001 fc6c 	bl	80099b4 <USBD_LL_PrepareReceive>
 80080dc:	e03a      	b.n	8008154 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d11c      	bne.n	8008124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d316      	bcc.n	8008124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008100:	429a      	cmp	r2, r3
 8008102:	d20f      	bcs.n	8008124 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008104:	2200      	movs	r2, #0
 8008106:	2100      	movs	r1, #0
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 ff3a 	bl	8008f82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008116:	2300      	movs	r3, #0
 8008118:	2200      	movs	r2, #0
 800811a:	2100      	movs	r1, #0
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f001 fc49 	bl	80099b4 <USBD_LL_PrepareReceive>
 8008122:	e017      	b.n	8008154 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008136:	2b03      	cmp	r3, #3
 8008138:	d105      	bne.n	8008146 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008146:	2180      	movs	r1, #128	; 0x80
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f001 fb89 	bl	8009860 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 ff69 	bl	8009026 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800815a:	2b01      	cmp	r3, #1
 800815c:	d123      	bne.n	80081a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff fe99 	bl	8007e96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800816c:	e01b      	b.n	80081a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d013      	beq.n	80081a2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008180:	2b03      	cmp	r3, #3
 8008182:	d10e      	bne.n	80081a2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	7afa      	ldrb	r2, [r7, #11]
 800818e:	4611      	mov	r1, r2
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	e002      	b.n	80081a8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e000      	b.n	80081a8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d009      	beq.n	80081f4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6852      	ldr	r2, [r2, #4]
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	4611      	mov	r1, r2
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081f4:	2340      	movs	r3, #64	; 0x40
 80081f6:	2200      	movs	r2, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 faeb 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	2200      	movs	r2, #0
 8008214:	2180      	movs	r1, #128	; 0x80
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 fadd 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2240      	movs	r2, #64	; 0x40
 8008226:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2204      	movs	r2, #4
 800826a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828a:	2b04      	cmp	r3, #4
 800828c:	d105      	bne.n	800829a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d10b      	bne.n	80082d2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6852      	ldr	r2, [r2, #4]
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	4611      	mov	r1, r2
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
  }

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800835e:	b480      	push	{r7}
 8008360:	b087      	sub	sp, #28
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800837c:	8a3b      	ldrh	r3, [r7, #16]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	b21a      	sxth	r2, r3
 8008382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008386:	4313      	orrs	r3, r2
 8008388:	b21b      	sxth	r3, r3
 800838a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800838c:	89fb      	ldrh	r3, [r7, #14]
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d005      	beq.n	80083c2 <USBD_StdDevReq+0x26>
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d853      	bhi.n	8008462 <USBD_StdDevReq+0xc6>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <USBD_StdDevReq+0x3a>
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d14f      	bne.n	8008462 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
    break;
 80083d4:	e04a      	b.n	800846c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d83b      	bhi.n	8008456 <USBD_StdDevReq+0xba>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBD_StdDevReq+0x48>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008439 	.word	0x08008439
 80083e8:	0800844d 	.word	0x0800844d
 80083ec:	08008457 	.word	0x08008457
 80083f0:	08008443 	.word	0x08008443
 80083f4:	08008457 	.word	0x08008457
 80083f8:	08008417 	.word	0x08008417
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	08008457 	.word	0x08008457
 8008404:	0800842f 	.word	0x0800842f
 8008408:	08008421 	.word	0x08008421
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9d8 	bl	80087c4 <USBD_GetDescriptor>
      break;
 8008414:	e024      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb67 	bl	8008aec <USBD_SetAddress>
      break;
 800841e:	e01f      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fba6 	bl	8008b74 <USBD_SetConfig>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e018      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fc43 	bl	8008cbc <USBD_GetConfig>
      break;
 8008436:	e013      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc73 	bl	8008d26 <USBD_GetStatus>
      break;
 8008440:	e00e      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fca1 	bl	8008d8c <USBD_SetFeature>
      break;
 800844a:	e009      	b.n	8008460 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fcb0 	bl	8008db4 <USBD_ClrFeature>
      break;
 8008454:	e004      	b.n	8008460 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fd06 	bl	8008e6a <USBD_CtlError>
      break;
 800845e:	bf00      	nop
    }
    break;
 8008460:	e004      	b.n	800846c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fd00 	bl	8008e6a <USBD_CtlError>
    break;
 800846a:	bf00      	nop
  }

  return ret;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d005      	beq.n	800849e <USBD_StdItfReq+0x26>
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	d82e      	bhi.n	80084f4 <USBD_StdItfReq+0x7c>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <USBD_StdItfReq+0x26>
 800849a:	2b20      	cmp	r3, #32
 800849c:	d12a      	bne.n	80084f4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	3b01      	subs	r3, #1
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d81d      	bhi.n	80084e6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	889b      	ldrh	r3, [r3, #4]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d813      	bhi.n	80084dc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d110      	bne.n	80084f0 <USBD_StdItfReq+0x78>
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10d      	bne.n	80084f0 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fd93 	bl	8009000 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80084da:	e009      	b.n	80084f0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fcc3 	bl	8008e6a <USBD_CtlError>
      break;
 80084e4:	e004      	b.n	80084f0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fcbe 	bl	8008e6a <USBD_CtlError>
      break;
 80084ee:	e000      	b.n	80084f2 <USBD_StdItfReq+0x7a>
      break;
 80084f0:	bf00      	nop
    }
    break;
 80084f2:	e004      	b.n	80084fe <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcb7 	bl	8008e6a <USBD_CtlError>
    break;
 80084fc:	bf00      	nop
  }

  return ret;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	889b      	ldrh	r3, [r3, #4]
 800851a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008524:	2b40      	cmp	r3, #64	; 0x40
 8008526:	d007      	beq.n	8008538 <USBD_StdEPReq+0x30>
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	f200 8140 	bhi.w	80087ae <USBD_StdEPReq+0x2a6>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00c      	beq.n	800854c <USBD_StdEPReq+0x44>
 8008532:	2b20      	cmp	r3, #32
 8008534:	f040 813b 	bne.w	80087ae <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
    break;
 800854a:	e135      	b.n	80087b8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d007      	beq.n	8008564 <USBD_StdEPReq+0x5c>
 8008554:	2b03      	cmp	r3, #3
 8008556:	f300 8124 	bgt.w	80087a2 <USBD_StdEPReq+0x29a>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d07b      	beq.n	8008656 <USBD_StdEPReq+0x14e>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d03b      	beq.n	80085da <USBD_StdEPReq+0xd2>
 8008562:	e11e      	b.n	80087a2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856a:	2b02      	cmp	r3, #2
 800856c:	d002      	beq.n	8008574 <USBD_StdEPReq+0x6c>
 800856e:	2b03      	cmp	r3, #3
 8008570:	d016      	beq.n	80085a0 <USBD_StdEPReq+0x98>
 8008572:	e02c      	b.n	80085ce <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <USBD_StdEPReq+0x8e>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b80      	cmp	r3, #128	; 0x80
 800857e:	d00a      	beq.n	8008596 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f96b 	bl	8009860 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f967 	bl	8009860 <USBD_LL_StallEP>
 8008592:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008594:	e020      	b.n	80085d8 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fc66 	bl	8008e6a <USBD_CtlError>
        break;
 800859e:	e01b      	b.n	80085d8 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10e      	bne.n	80085c6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <USBD_StdEPReq+0xbe>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b80      	cmp	r3, #128	; 0x80
 80085b2:	d008      	beq.n	80085c6 <USBD_StdEPReq+0xbe>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f94d 	bl	8009860 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fd1a 	bl	8009000 <USBD_CtlSendStatus>

        break;
 80085cc:	e004      	b.n	80085d8 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc4a 	bl	8008e6a <USBD_CtlError>
        break;
 80085d6:	bf00      	nop
      }
      break;
 80085d8:	e0e8      	b.n	80087ac <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d002      	beq.n	80085ea <USBD_StdEPReq+0xe2>
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d016      	beq.n	8008616 <USBD_StdEPReq+0x10e>
 80085e8:	e02e      	b.n	8008648 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00d      	beq.n	800860c <USBD_StdEPReq+0x104>
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d00a      	beq.n	800860c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f930 	bl	8009860 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008600:	2180      	movs	r1, #128	; 0x80
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 f92c 	bl	8009860 <USBD_LL_StallEP>
 8008608:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800860a:	e023      	b.n	8008654 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fc2b 	bl	8008e6a <USBD_CtlError>
        break;
 8008614:	e01e      	b.n	8008654 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d119      	bne.n	8008652 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 f936 	bl	800989e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fce4 	bl	8009000 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
        }
        break;
 8008646:	e004      	b.n	8008652 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fc0d 	bl	8008e6a <USBD_CtlError>
        break;
 8008650:	e000      	b.n	8008654 <USBD_StdEPReq+0x14c>
        break;
 8008652:	bf00      	nop
      }
      break;
 8008654:	e0aa      	b.n	80087ac <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865c:	2b02      	cmp	r3, #2
 800865e:	d002      	beq.n	8008666 <USBD_StdEPReq+0x15e>
 8008660:	2b03      	cmp	r3, #3
 8008662:	d032      	beq.n	80086ca <USBD_StdEPReq+0x1c2>
 8008664:	e097      	b.n	8008796 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <USBD_StdEPReq+0x174>
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d004      	beq.n	800867c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fbf8 	bl	8008e6a <USBD_CtlError>
          break;
 800867a:	e091      	b.n	80087a0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800867c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	da0b      	bge.n	800869c <USBD_StdEPReq+0x194>
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	3310      	adds	r3, #16
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	e00b      	b.n	80086b4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	3304      	adds	r3, #4
 80086b4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2202      	movs	r2, #2
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fc42 	bl	8008f4c <USBD_CtlSendData>
        break;
 80086c8:	e06a      	b.n	80087a0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80086ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da11      	bge.n	80086f6 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3324      	adds	r3, #36	; 0x24
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d117      	bne.n	800871c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fbbb 	bl	8008e6a <USBD_CtlError>
            break;
 80086f4:	e054      	b.n	80087a0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	440b      	add	r3, r1
 8008708:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fba8 	bl	8008e6a <USBD_CtlError>
            break;
 800871a:	e041      	b.n	80087a0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	da0b      	bge.n	800873c <USBD_StdEPReq+0x234>
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	3310      	adds	r3, #16
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	3304      	adds	r3, #4
 800873a:	e00b      	b.n	8008754 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	3304      	adds	r3, #4
 8008754:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <USBD_StdEPReq+0x25a>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b80      	cmp	r3, #128	; 0x80
 8008760:	d103      	bne.n	800876a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e00e      	b.n	8008788 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 f8b4 	bl	80098dc <USBD_LL_IsStallEP>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2201      	movs	r2, #1
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e002      	b.n	8008788 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2202      	movs	r2, #2
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fbdc 	bl	8008f4c <USBD_CtlSendData>
          break;
 8008794:	e004      	b.n	80087a0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fb66 	bl	8008e6a <USBD_CtlError>
        break;
 800879e:	bf00      	nop
      }
      break;
 80087a0:	e004      	b.n	80087ac <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fb60 	bl	8008e6a <USBD_CtlError>
      break;
 80087aa:	bf00      	nop
    }
    break;
 80087ac:	e004      	b.n	80087b8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb5a 	bl	8008e6a <USBD_CtlError>
    break;
 80087b6:	bf00      	nop
  }

  return ret;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b0e      	cmp	r3, #14
 80087e6:	f200 8152 	bhi.w	8008a8e <USBD_GetDescriptor+0x2ca>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBD_GetDescriptor+0x2c>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008861 	.word	0x08008861
 80087f4:	08008879 	.word	0x08008879
 80087f8:	080088b9 	.word	0x080088b9
 80087fc:	08008a8f 	.word	0x08008a8f
 8008800:	08008a8f 	.word	0x08008a8f
 8008804:	08008a2f 	.word	0x08008a2f
 8008808:	08008a5b 	.word	0x08008a5b
 800880c:	08008a8f 	.word	0x08008a8f
 8008810:	08008a8f 	.word	0x08008a8f
 8008814:	08008a8f 	.word	0x08008a8f
 8008818:	08008a8f 	.word	0x08008a8f
 800881c:	08008a8f 	.word	0x08008a8f
 8008820:	08008a8f 	.word	0x08008a8f
 8008824:	08008a8f 	.word	0x08008a8f
 8008828:	0800882d 	.word	0x0800882d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	f107 0108 	add.w	r1, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800884e:	e126      	b.n	8008a9e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb09 	bl	8008e6a <USBD_CtlError>
      err++;
 8008858:	7afb      	ldrb	r3, [r7, #11]
 800885a:	3301      	adds	r3, #1
 800885c:	72fb      	strb	r3, [r7, #11]
    break;
 800885e:	e11e      	b.n	8008a9e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
    break;
 8008876:	e112      	b.n	8008a9e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7c1b      	ldrb	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10d      	bne.n	800889c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	f107 0208 	add.w	r2, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	2202      	movs	r2, #2
 8008898:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800889a:	e100      	b.n	8008a9e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	f107 0208 	add.w	r2, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
    break;
 80088b6:	e0f2      	b.n	8008a9e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	885b      	ldrh	r3, [r3, #2]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b05      	cmp	r3, #5
 80088c0:	f200 80ac 	bhi.w	8008a1c <USBD_GetDescriptor+0x258>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBD_GetDescriptor+0x108>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	080088e5 	.word	0x080088e5
 80088d0:	08008919 	.word	0x08008919
 80088d4:	0800894d 	.word	0x0800894d
 80088d8:	08008981 	.word	0x08008981
 80088dc:	080089b5 	.word	0x080089b5
 80088e0:	080089e9 	.word	0x080089e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008906:	e091      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 faad 	bl	8008e6a <USBD_CtlError>
        err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
      break;
 8008916:	e089      	b.n	8008a2c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800893a:	e077      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa93 	bl	8008e6a <USBD_CtlError>
        err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
      break;
 800894a:	e06f      	b.n	8008a2c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800896e:	e05d      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa79 	bl	8008e6a <USBD_CtlError>
        err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
      break;
 800897e:	e055      	b.n	8008a2c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e043      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa5f 	bl	8008e6a <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e03b      	b.n	8008a2c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d6:	e029      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa45 	bl	8008e6a <USBD_CtlError>
        err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
      break;
 80089e6:	e021      	b.n	8008a2c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0a:	e00f      	b.n	8008a2c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa2b 	bl	8008e6a <USBD_CtlError>
        err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1a:	e007      	b.n	8008a2c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa23 	bl	8008e6a <USBD_CtlError>
      err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a2a:	bf00      	nop
    }
    break;
 8008a2c:	e037      	b.n	8008a9e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7c1b      	ldrb	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d109      	bne.n	8008a4a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	f107 0208 	add.w	r2, r7, #8
 8008a42:	4610      	mov	r0, r2
 8008a44:	4798      	blx	r3
 8008a46:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a48:	e029      	b.n	8008a9e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa0c 	bl	8008e6a <USBD_CtlError>
      err++;
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	3301      	adds	r3, #1
 8008a56:	72fb      	strb	r3, [r7, #11]
    break;
 8008a58:	e021      	b.n	8008a9e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	7c1b      	ldrb	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10d      	bne.n	8008a7e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	f107 0208 	add.w	r2, r7, #8
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4798      	blx	r3
 8008a72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	2207      	movs	r2, #7
 8008a7a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a7c:	e00f      	b.n	8008a9e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f9f2 	bl	8008e6a <USBD_CtlError>
      err++;
 8008a86:	7afb      	ldrb	r3, [r7, #11]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	72fb      	strb	r3, [r7, #11]
    break;
 8008a8c:	e007      	b.n	8008a9e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9ea 	bl	8008e6a <USBD_CtlError>
    err++;
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	72fb      	strb	r3, [r7, #11]
    break;
 8008a9c:	bf00      	nop
  }

  if (err != 0U)
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11e      	bne.n	8008ae2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	88db      	ldrh	r3, [r3, #6]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d016      	beq.n	8008ada <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008aac:	893b      	ldrh	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00e      	beq.n	8008ad0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88da      	ldrh	r2, [r3, #6]
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	bf28      	it	cs
 8008abc:	4613      	movcs	r3, r2
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ac2:	893b      	ldrh	r3, [r7, #8]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fa3f 	bl	8008f4c <USBD_CtlSendData>
 8008ace:	e009      	b.n	8008ae4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f9c9 	bl	8008e6a <USBD_CtlError>
 8008ad8:	e004      	b.n	8008ae4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa90 	bl	8009000 <USBD_CtlSendStatus>
 8008ae0:	e000      	b.n	8008ae4 <USBD_GetDescriptor+0x320>
    return;
 8008ae2:	bf00      	nop
    }
  }
}
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop

08008aec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	889b      	ldrh	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d130      	bne.n	8008b60 <USBD_SetAddress+0x74>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d12c      	bne.n	8008b60 <USBD_SetAddress+0x74>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	885b      	ldrh	r3, [r3, #2]
 8008b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b0c:	d828      	bhi.n	8008b60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	885b      	ldrh	r3, [r3, #2]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d104      	bne.n	8008b2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f99f 	bl	8008e6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	e01d      	b.n	8008b6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7bfa      	ldrb	r2, [r7, #15]
 8008b32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fefa 	bl	8009934 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa5d 	bl	8009000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	e009      	b.n	8008b6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5e:	e004      	b.n	8008b6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f981 	bl	8008e6a <USBD_CtlError>
  }
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	4b4b      	ldr	r3, [pc, #300]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008b8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b8c:	4b4a      	ldr	r3, [pc, #296]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d905      	bls.n	8008ba0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f967 	bl	8008e6a <USBD_CtlError>
    return USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e087      	b.n	8008cb0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d002      	beq.n	8008bb0 <USBD_SetConfig+0x3c>
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d025      	beq.n	8008bfa <USBD_SetConfig+0x86>
 8008bae:	e071      	b.n	8008c94 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008bb0:	4b41      	ldr	r3, [pc, #260]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01c      	beq.n	8008bf2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008bb8:	4b3f      	ldr	r3, [pc, #252]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bc2:	4b3d      	ldr	r3, [pc, #244]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff f96f 	bl	8007eac <USBD_SetClassConfig>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f945 	bl	8008e6a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008be0:	e065      	b.n	8008cae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa0c 	bl	8009000 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008bf0:	e05d      	b.n	8008cae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fa04 	bl	8009000 <USBD_CtlSendStatus>
    break;
 8008bf8:	e059      	b.n	8008cae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008bfa:	4b2f      	ldr	r3, [pc, #188]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d112      	bne.n	8008c28 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2202      	movs	r2, #2
 8008c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c0a:	4b2b      	ldr	r3, [pc, #172]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c14:	4b28      	ldr	r3, [pc, #160]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff f962 	bl	8007ee4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f9ed 	bl	8009000 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c26:	e042      	b.n	8008cae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c28:	4b23      	ldr	r3, [pc, #140]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d02a      	beq.n	8008c8c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff f950 	bl	8007ee4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c44:	4b1c      	ldr	r3, [pc, #112]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff f929 	bl	8007eac <USBD_SetClassConfig>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00f      	beq.n	8008c84 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f8ff 	bl	8008e6a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f935 	bl	8007ee4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c82:	e014      	b.n	8008cae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9bb 	bl	8009000 <USBD_CtlSendStatus>
    break;
 8008c8a:	e010      	b.n	8008cae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9b7 	bl	8009000 <USBD_CtlSendStatus>
    break;
 8008c92:	e00c      	b.n	8008cae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8e7 	bl	8008e6a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <USBD_SetConfig+0x144>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f91e 	bl	8007ee4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cac:	bf00      	nop
  }

  return ret;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000220 	.word	0x20000220

08008cbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	88db      	ldrh	r3, [r3, #6]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d004      	beq.n	8008cd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8ca 	bl	8008e6a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008cd6:	e022      	b.n	8008d1e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	dc02      	bgt.n	8008ce8 <USBD_GetConfig+0x2c>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dc03      	bgt.n	8008cee <USBD_GetConfig+0x32>
 8008ce6:	e015      	b.n	8008d14 <USBD_GetConfig+0x58>
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetConfig+0x48>
 8008cec:	e012      	b.n	8008d14 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f925 	bl	8008f4c <USBD_CtlSendData>
      break;
 8008d02:	e00c      	b.n	8008d1e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3304      	adds	r3, #4
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f91d 	bl	8008f4c <USBD_CtlSendData>
      break;
 8008d12:	e004      	b.n	8008d1e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8a7 	bl	8008e6a <USBD_CtlError>
      break;
 8008d1c:	bf00      	nop
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d81e      	bhi.n	8008d7a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d004      	beq.n	8008d4e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f88f 	bl	8008e6a <USBD_CtlError>
      break;
 8008d4c:	e01a      	b.n	8008d84 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d005      	beq.n	8008d6a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f043 0202 	orr.w	r2, r3, #2
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	330c      	adds	r3, #12
 8008d6e:	2202      	movs	r2, #2
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f8ea 	bl	8008f4c <USBD_CtlSendData>
    break;
 8008d78:	e004      	b.n	8008d84 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f874 	bl	8008e6a <USBD_CtlError>
    break;
 8008d82:	bf00      	nop
  }
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	885b      	ldrh	r3, [r3, #2]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d106      	bne.n	8008dac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f92a 	bl	8009000 <USBD_CtlSendStatus>
  }
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d80b      	bhi.n	8008de2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d10c      	bne.n	8008dec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f910 	bl	8009000 <USBD_CtlSendStatus>
      }
      break;
 8008de0:	e004      	b.n	8008dec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f840 	bl	8008e6a <USBD_CtlError>
      break;
 8008dea:	e000      	b.n	8008dee <USBD_ClrFeature+0x3a>
      break;
 8008dec:	bf00      	nop
  }
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	781a      	ldrb	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff fa9c 	bl	800835e <SWAPBYTE>
 8008e26:	4603      	mov	r3, r0
 8008e28:	461a      	mov	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3301      	adds	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fa8f 	bl	800835e <SWAPBYTE>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3301      	adds	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7ff fa82 	bl	800835e <SWAPBYTE>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	80da      	strh	r2, [r3, #6]
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e74:	2180      	movs	r1, #128	; 0x80
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcf2 	bl	8009860 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fcee 	bl	8009860 <USBD_LL_StallEP>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d036      	beq.n	8008f10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ea6:	6938      	ldr	r0, [r7, #16]
 8008ea8:	f000 f836 	bl	8008f18 <USBD_GetLen>
 8008eac:	4603      	mov	r3, r0
 8008eae:	3301      	adds	r3, #1
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008edc:	e013      	b.n	8008f06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3301      	adds	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
    idx++;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	4413      	add	r3, r2
 8008efc:	2200      	movs	r2, #0
 8008efe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	3301      	adds	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e7      	bne.n	8008ede <USBD_GetString+0x52>
 8008f0e:	e000      	b.n	8008f12 <USBD_GetString+0x86>
    return;
 8008f10:	bf00      	nop
  }
}
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f28:	e005      	b.n	8008f36 <USBD_GetLen+0x1e>
  {
    len++;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	3301      	adds	r3, #1
 8008f34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f5      	bne.n	8008f2a <USBD_GetLen+0x12>
  }

  return len;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	2100      	movs	r1, #0
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fcfd 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	2100      	movs	r1, #0
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fcec 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fcf0 	bl	80099b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fcdf 	bl	80099b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2204      	movs	r2, #4
 800900c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	2100      	movs	r1, #0
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fcab 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2205      	movs	r2, #5
 8009032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009036:	2300      	movs	r3, #0
 8009038:	2200      	movs	r2, #0
 800903a:	2100      	movs	r1, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fcb9 	bl	80099b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009050:	2200      	movs	r2, #0
 8009052:	4912      	ldr	r1, [pc, #72]	; (800909c <MX_USB_DEVICE_Init+0x50>)
 8009054:	4812      	ldr	r0, [pc, #72]	; (80090a0 <MX_USB_DEVICE_Init+0x54>)
 8009056:	f7fe febb 	bl	8007dd0 <USBD_Init>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009060:	f7f7 fd8a 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009064:	490f      	ldr	r1, [pc, #60]	; (80090a4 <MX_USB_DEVICE_Init+0x58>)
 8009066:	480e      	ldr	r0, [pc, #56]	; (80090a0 <MX_USB_DEVICE_Init+0x54>)
 8009068:	f7fe fee8 	bl	8007e3c <USBD_RegisterClass>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009072:	f7f7 fd81 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009076:	490c      	ldr	r1, [pc, #48]	; (80090a8 <MX_USB_DEVICE_Init+0x5c>)
 8009078:	4809      	ldr	r0, [pc, #36]	; (80090a0 <MX_USB_DEVICE_Init+0x54>)
 800907a:	f7fe fe3d 	bl	8007cf8 <USBD_CDC_RegisterInterface>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009084:	f7f7 fd78 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009088:	4805      	ldr	r0, [pc, #20]	; (80090a0 <MX_USB_DEVICE_Init+0x54>)
 800908a:	f7fe fef8 	bl	8007e7e <USBD_Start>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009094:	f7f7 fd70 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009098:	bf00      	nop
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20000138 	.word	0x20000138
 80090a0:	200003c4 	.word	0x200003c4
 80090a4:	20000018 	.word	0x20000018
 80090a8:	20000124 	.word	0x20000124

080090ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090b0:	2200      	movs	r2, #0
 80090b2:	4905      	ldr	r1, [pc, #20]	; (80090c8 <CDC_Init_FS+0x1c>)
 80090b4:	4805      	ldr	r0, [pc, #20]	; (80090cc <CDC_Init_FS+0x20>)
 80090b6:	f7fe fe34 	bl	8007d22 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ba:	4905      	ldr	r1, [pc, #20]	; (80090d0 <CDC_Init_FS+0x24>)
 80090bc:	4803      	ldr	r0, [pc, #12]	; (80090cc <CDC_Init_FS+0x20>)
 80090be:	f7fe fe49 	bl	8007d54 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80090c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000a7c 	.word	0x20000a7c
 80090cc:	200003c4 	.word	0x200003c4
 80090d0:	20000694 	.word	0x20000694

080090d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80090d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090da:	4618      	mov	r0, r3
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	71fb      	strb	r3, [r7, #7]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b23      	cmp	r3, #35	; 0x23
 80090f8:	d85c      	bhi.n	80091b4 <CDC_Control_FS+0xd0>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <CDC_Control_FS+0x1c>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	080091b5 	.word	0x080091b5
 8009104:	080091b5 	.word	0x080091b5
 8009108:	080091b5 	.word	0x080091b5
 800910c:	080091b5 	.word	0x080091b5
 8009110:	080091b5 	.word	0x080091b5
 8009114:	080091b5 	.word	0x080091b5
 8009118:	080091b5 	.word	0x080091b5
 800911c:	080091b5 	.word	0x080091b5
 8009120:	080091b5 	.word	0x080091b5
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080091b5 	.word	0x080091b5
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091b5 	.word	0x080091b5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091b5 	.word	0x080091b5
 8009148:	080091b5 	.word	0x080091b5
 800914c:	080091b5 	.word	0x080091b5
 8009150:	080091b5 	.word	0x080091b5
 8009154:	080091b5 	.word	0x080091b5
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091b5 	.word	0x080091b5
 8009164:	080091b5 	.word	0x080091b5
 8009168:	080091b5 	.word	0x080091b5
 800916c:	080091b5 	.word	0x080091b5
 8009170:	080091b5 	.word	0x080091b5
 8009174:	080091b5 	.word	0x080091b5
 8009178:	080091b5 	.word	0x080091b5
 800917c:	080091b5 	.word	0x080091b5
 8009180:	08009191 	.word	0x08009191
 8009184:	080091a3 	.word	0x080091a3
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091b5 	.word	0x080091b5
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		memcpy(line_code, pbuf, 7);
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <CDC_Control_FS+0xe0>)
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	6810      	ldr	r0, [r2, #0]
 8009196:	6018      	str	r0, [r3, #0]
 8009198:	8891      	ldrh	r1, [r2, #4]
 800919a:	7992      	ldrb	r2, [r2, #6]
 800919c:	8099      	strh	r1, [r3, #4]
 800919e:	719a      	strb	r2, [r3, #6]
		break;
 80091a0:	e009      	b.n	80091b6 <CDC_Control_FS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, line_code, 7);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	4a07      	ldr	r2, [pc, #28]	; (80091c4 <CDC_Control_FS+0xe0>)
 80091a6:	6810      	ldr	r0, [r2, #0]
 80091a8:	6018      	str	r0, [r3, #0]
 80091aa:	8891      	ldrh	r1, [r2, #4]
 80091ac:	7992      	ldrb	r2, [r2, #6]
 80091ae:	8099      	strh	r1, [r3, #4]
 80091b0:	719a      	strb	r2, [r3, #6]
		break;
 80091b2:	e000      	b.n	80091b6 <CDC_Control_FS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80091b4:	bf00      	nop
	}

	return (USBD_OK);
 80091b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	2000011c 	.word	0x2000011c

080091c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	480b      	ldr	r0, [pc, #44]	; (8009204 <CDC_Receive_FS+0x3c>)
 80091d6:	f7fe fdbd 	bl	8007d54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091da:	480a      	ldr	r0, [pc, #40]	; (8009204 <CDC_Receive_FS+0x3c>)
 80091dc:	f7fe fdce 	bl	8007d7c <USBD_CDC_ReceivePacket>

  //copy the received buffer to a different one
  memcpy(usb_rcv_buffer, Buf, PKG_SIZE);
 80091e0:	4b09      	ldr	r3, [pc, #36]	; (8009208 <CDC_Receive_FS+0x40>)
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6811      	ldr	r1, [r2, #0]
 80091e6:	6019      	str	r1, [r3, #0]
 80091e8:	8892      	ldrh	r2, [r2, #4]
 80091ea:	809a      	strh	r2, [r3, #4]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ec:	4805      	ldr	r0, [pc, #20]	; (8009204 <CDC_Receive_FS+0x3c>)
 80091ee:	f7fe fdc5 	bl	8007d7c <USBD_CDC_ReceivePacket>

  usb_command_received = 1;
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <CDC_Receive_FS+0x44>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80091f8:	2300      	movs	r3, #0

	// USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
	// USBD_CDC_ReceivePacket(&hUsbDeviceFS);
	// return (USBD_OK);
  /* USER CODE END 6 */
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	200003c4 	.word	0x200003c4
 8009208:	200002d4 	.word	0x200002d4
 800920c:	200003bc 	.word	0x200003bc

08009210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2212      	movs	r2, #18
 8009244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	20000158 	.word	0x20000158

08009258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2204      	movs	r2, #4
 8009268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800926a:	4b03      	ldr	r3, [pc, #12]	; (8009278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	20000178 	.word	0x20000178

0800927c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4907      	ldr	r1, [pc, #28]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009294:	f7ff fdfa 	bl	8008e8c <USBD_GetString>
 8009298:	e004      	b.n	80092a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	4904      	ldr	r1, [pc, #16]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800929e:	4805      	ldr	r0, [pc, #20]	; (80092b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092a0:	f7ff fdf4 	bl	8008e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000e64 	.word	0x20000e64
 80092b4:	0800a564 	.word	0x0800a564

080092b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	4904      	ldr	r1, [pc, #16]	; (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092c8:	4804      	ldr	r0, [pc, #16]	; (80092dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092ca:	f7ff fddf 	bl	8008e8c <USBD_GetString>
  return USBD_StrDesc;
 80092ce:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000e64 	.word	0x20000e64
 80092dc:	0800a57c 	.word	0x0800a57c

080092e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	221a      	movs	r2, #26
 80092f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092f2:	f000 f855 	bl	80093a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092f6:	4b02      	ldr	r3, [pc, #8]	; (8009300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	2000017c 	.word	0x2000017c

08009304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4907      	ldr	r1, [pc, #28]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800931a:	4808      	ldr	r0, [pc, #32]	; (800933c <USBD_FS_ConfigStrDescriptor+0x38>)
 800931c:	f7ff fdb6 	bl	8008e8c <USBD_GetString>
 8009320:	e004      	b.n	800932c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	4904      	ldr	r1, [pc, #16]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009326:	4805      	ldr	r0, [pc, #20]	; (800933c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009328:	f7ff fdb0 	bl	8008e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000e64 	.word	0x20000e64
 800933c:	0800a590 	.word	0x0800a590

08009340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4907      	ldr	r1, [pc, #28]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009356:	4808      	ldr	r0, [pc, #32]	; (8009378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009358:	f7ff fd98 	bl	8008e8c <USBD_GetString>
 800935c:	e004      	b.n	8009368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4904      	ldr	r1, [pc, #16]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009362:	4805      	ldr	r0, [pc, #20]	; (8009378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009364:	f7ff fd92 	bl	8008e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000e64 	.word	0x20000e64
 8009378:	0800a59c 	.word	0x0800a59c

0800937c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	220c      	movs	r2, #12
 800938c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	2000016c 	.word	0x2000016c

080093a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093a6:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <Get_SerialNum+0x44>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093ac:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <Get_SerialNum+0x48>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <Get_SerialNum+0x4c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d009      	beq.n	80093da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093c6:	2208      	movs	r2, #8
 80093c8:	4909      	ldr	r1, [pc, #36]	; (80093f0 <Get_SerialNum+0x50>)
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f814 	bl	80093f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093d0:	2204      	movs	r2, #4
 80093d2:	4908      	ldr	r1, [pc, #32]	; (80093f4 <Get_SerialNum+0x54>)
 80093d4:	68b8      	ldr	r0, [r7, #8]
 80093d6:	f000 f80f 	bl	80093f8 <IntToUnicode>
  }
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	1ff0f420 	.word	0x1ff0f420
 80093e8:	1ff0f424 	.word	0x1ff0f424
 80093ec:	1ff0f428 	.word	0x1ff0f428
 80093f0:	2000017e 	.word	0x2000017e
 80093f4:	2000018e 	.word	0x2000018e

080093f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]
 800940e:	e027      	b.n	8009460 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	0f1b      	lsrs	r3, r3, #28
 8009414:	2b09      	cmp	r3, #9
 8009416:	d80b      	bhi.n	8009430 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0f1b      	lsrs	r3, r3, #28
 800941c:	b2da      	uxtb	r2, r3
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	4619      	mov	r1, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	440b      	add	r3, r1
 8009428:	3230      	adds	r2, #48	; 0x30
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e00a      	b.n	8009446 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	0f1b      	lsrs	r3, r3, #28
 8009434:	b2da      	uxtb	r2, r3
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	4619      	mov	r1, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	440b      	add	r3, r1
 8009440:	3237      	adds	r2, #55	; 0x37
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	3301      	adds	r3, #1
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4413      	add	r3, r2
 8009456:	2200      	movs	r2, #0
 8009458:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	3301      	adds	r3, #1
 800945e:	75fb      	strb	r3, [r7, #23]
 8009460:	7dfa      	ldrb	r2, [r7, #23]
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	429a      	cmp	r2, r3
 8009466:	d3d3      	bcc.n	8009410 <IntToUnicode+0x18>
  }
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009498:	d13c      	bne.n	8009514 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800949a:	4b20      	ldr	r3, [pc, #128]	; (800951c <HAL_PCD_MspInit+0xa4>)
 800949c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949e:	4a1f      	ldr	r2, [pc, #124]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094a0:	f043 0301 	orr.w	r3, r3, #1
 80094a4:	6313      	str	r3, [r2, #48]	; 0x30
 80094a6:	4b1d      	ldr	r3, [pc, #116]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094b8:	2302      	movs	r3, #2
 80094ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094c0:	2303      	movs	r3, #3
 80094c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094c4:	230a      	movs	r3, #10
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094c8:	f107 0314 	add.w	r3, r7, #20
 80094cc:	4619      	mov	r1, r3
 80094ce:	4814      	ldr	r0, [pc, #80]	; (8009520 <HAL_PCD_MspInit+0xa8>)
 80094d0:	f7f8 fb94 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094d4:	4b11      	ldr	r3, [pc, #68]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	4a10      	ldr	r2, [pc, #64]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094de:	6353      	str	r3, [r2, #52]	; 0x34
 80094e0:	4b0e      	ldr	r3, [pc, #56]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4b0b      	ldr	r3, [pc, #44]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f0:	4a0a      	ldr	r2, [pc, #40]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094f6:	6453      	str	r3, [r2, #68]	; 0x44
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <HAL_PCD_MspInit+0xa4>)
 80094fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009500:	60bb      	str	r3, [r7, #8]
 8009502:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8009504:	2200      	movs	r2, #0
 8009506:	2102      	movs	r1, #2
 8009508:	2043      	movs	r0, #67	; 0x43
 800950a:	f7f8 faae 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800950e:	2043      	movs	r0, #67	; 0x43
 8009510:	f7f8 fac7 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009514:	bf00      	nop
 8009516:	3728      	adds	r7, #40	; 0x28
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	40023800 	.word	0x40023800
 8009520:	40020000 	.word	0x40020000

08009524 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f7fe fcea 	bl	8007f14 <USBD_LL_SetupStage>
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800955a:	78fa      	ldrb	r2, [r7, #3]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	4619      	mov	r1, r3
 8009572:	f7fe fd24 	bl	8007fbe <USBD_LL_DataOutStage>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	3348      	adds	r3, #72	; 0x48
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	78fb      	ldrb	r3, [r7, #3]
 80095a4:	4619      	mov	r1, r3
 80095a6:	f7fe fd6d 	bl	8008084 <USBD_LL_DataInStage>
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fe71 	bl	80082a8 <USBD_LL_SOF>
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095d6:	2301      	movs	r3, #1
 80095d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e008      	b.n	80095fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d102      	bne.n	80095f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095f0:	2301      	movs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	e001      	b.n	80095fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095f6:	f7f7 fabf 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009600:	7bfa      	ldrb	r2, [r7, #15]
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fe14 	bl	8008232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fdcd 	bl	80081b0 <USBD_LL_Reset>
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fe0f 	bl	8008252 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009654:	4b04      	ldr	r3, [pc, #16]	; (8009668 <HAL_PCD_SuspendCallback+0x48>)
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	4a03      	ldr	r2, [pc, #12]	; (8009668 <HAL_PCD_SuspendCallback+0x48>)
 800965a:	f043 0306 	orr.w	r3, r3, #6
 800965e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	e000ed00 	.word	0xe000ed00

0800966c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fdfe 	bl	800827c <USBD_LL_Resume>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fe29 	bl	80082f6 <USBD_LL_IsoOUTIncomplete>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fe0a 	bl	80082dc <USBD_LL_IsoINIncomplete>
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fe16 	bl	8008310 <USBD_LL_DevConnected>
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fe13 	bl	8008326 <USBD_LL_DevDisconnected>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d13c      	bne.n	8009792 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009718:	4a20      	ldr	r2, [pc, #128]	; (800979c <USBD_LL_Init+0x94>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a1e      	ldr	r2, [pc, #120]	; (800979c <USBD_LL_Init+0x94>)
 8009724:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009728:	4b1c      	ldr	r3, [pc, #112]	; (800979c <USBD_LL_Init+0x94>)
 800972a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800972e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009730:	4b1a      	ldr	r3, [pc, #104]	; (800979c <USBD_LL_Init+0x94>)
 8009732:	2206      	movs	r2, #6
 8009734:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009736:	4b19      	ldr	r3, [pc, #100]	; (800979c <USBD_LL_Init+0x94>)
 8009738:	2202      	movs	r2, #2
 800973a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800973c:	4b17      	ldr	r3, [pc, #92]	; (800979c <USBD_LL_Init+0x94>)
 800973e:	2200      	movs	r2, #0
 8009740:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <USBD_LL_Init+0x94>)
 8009744:	2202      	movs	r2, #2
 8009746:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009748:	4b14      	ldr	r3, [pc, #80]	; (800979c <USBD_LL_Init+0x94>)
 800974a:	2200      	movs	r2, #0
 800974c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800974e:	4b13      	ldr	r3, [pc, #76]	; (800979c <USBD_LL_Init+0x94>)
 8009750:	2200      	movs	r2, #0
 8009752:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009754:	4b11      	ldr	r3, [pc, #68]	; (800979c <USBD_LL_Init+0x94>)
 8009756:	2200      	movs	r2, #0
 8009758:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800975a:	4b10      	ldr	r3, [pc, #64]	; (800979c <USBD_LL_Init+0x94>)
 800975c:	2200      	movs	r2, #0
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009760:	4b0e      	ldr	r3, [pc, #56]	; (800979c <USBD_LL_Init+0x94>)
 8009762:	2200      	movs	r2, #0
 8009764:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <USBD_LL_Init+0x94>)
 8009768:	f7f8 fc26 	bl	8001fb8 <HAL_PCD_Init>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009772:	f7f7 fa01 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009776:	2180      	movs	r1, #128	; 0x80
 8009778:	4808      	ldr	r0, [pc, #32]	; (800979c <USBD_LL_Init+0x94>)
 800977a:	f7f9 fda6 	bl	80032ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800977e:	2240      	movs	r2, #64	; 0x40
 8009780:	2100      	movs	r1, #0
 8009782:	4806      	ldr	r0, [pc, #24]	; (800979c <USBD_LL_Init+0x94>)
 8009784:	f7f9 fd5a 	bl	800323c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009788:	2280      	movs	r2, #128	; 0x80
 800978a:	2101      	movs	r1, #1
 800978c:	4803      	ldr	r0, [pc, #12]	; (800979c <USBD_LL_Init+0x94>)
 800978e:	f7f9 fd55 	bl	800323c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20001064 	.word	0x20001064

080097a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f8 fd22 	bl	8002200 <HAL_PCD_Start>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f97e 	bl	8009ac4 <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	461a      	mov	r2, r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70bb      	strb	r3, [r7, #2]
 80097ec:	4613      	mov	r3, r2
 80097ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097fe:	78bb      	ldrb	r3, [r7, #2]
 8009800:	883a      	ldrh	r2, [r7, #0]
 8009802:	78f9      	ldrb	r1, [r7, #3]
 8009804:	f7f9 f922 	bl	8002a4c <HAL_PCD_EP_Open>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f958 	bl	8009ac4 <USBD_Get_USB_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009818:	7bbb      	ldrb	r3, [r7, #14]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800983c:	78fa      	ldrb	r2, [r7, #3]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f7f9 f96b 	bl	8002b1c <HAL_PCD_EP_Close>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f939 	bl	8009ac4 <USBD_Get_USB_Status>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009856:	7bbb      	ldrb	r3, [r7, #14]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 fa43 	bl	8002d0a <HAL_PCD_EP_SetStall>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f91a 	bl	8009ac4 <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7f9 fa88 	bl	8002dd2 <HAL_PCD_EP_ClrStall>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f8fb 	bl	8009ac4 <USBD_Get_USB_Status>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da0b      	bge.n	8009910 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	4613      	mov	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	440b      	add	r3, r1
 800990a:	333e      	adds	r3, #62	; 0x3e
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	e00b      	b.n	8009928 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009916:	68f9      	ldr	r1, [r7, #12]
 8009918:	4613      	mov	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009926:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7f9 f855 	bl	8002a02 <HAL_PCD_SetAddress>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f8b0 	bl	8009ac4 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009968:	7bbb      	ldrb	r3, [r7, #14]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b086      	sub	sp, #24
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	603b      	str	r3, [r7, #0]
 800997e:	460b      	mov	r3, r1
 8009980:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009990:	7af9      	ldrb	r1, [r7, #11]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	f7f9 f96e 	bl	8002c76 <HAL_PCD_EP_Transmit>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 f88f 	bl	8009ac4 <USBD_Get_USB_Status>
 80099a6:	4603      	mov	r3, r0
 80099a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	460b      	mov	r3, r1
 80099c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099d2:	7af9      	ldrb	r1, [r7, #11]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	f7f9 f8ea 	bl	8002bb0 <HAL_PCD_EP_Receive>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f86e 	bl	8009ac4 <USBD_Get_USB_Status>
 80099e8:	4603      	mov	r3, r0
 80099ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7f9 f91a 	bl	8002c46 <HAL_PCD_EP_GetRxCount>
 8009a12:	4603      	mov	r3, r0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <HAL_PCDEx_LPM_Callback+0x18>
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d01f      	beq.n	8009a72 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009a32:	e03b      	b.n	8009aac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d007      	beq.n	8009a4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a3c:	f000 f83c 	bl	8009ab8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a40:	4b1c      	ldr	r3, [pc, #112]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	4a1b      	ldr	r2, [pc, #108]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009a46:	f023 0306 	bic.w	r3, r3, #6
 8009a4a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fc06 	bl	800827c <USBD_LL_Resume>
    break;
 8009a70:	e01c      	b.n	8009aac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6812      	ldr	r2, [r2, #0]
 8009a80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a84:	f043 0301 	orr.w	r3, r3, #1
 8009a88:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fbde 	bl	8008252 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	4a04      	ldr	r2, [pc, #16]	; (8009ab4 <HAL_PCDEx_LPM_Callback+0x98>)
 8009aa4:	f043 0306 	orr.w	r3, r3, #6
 8009aa8:	6113      	str	r3, [r2, #16]
    break;
 8009aaa:	bf00      	nop
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	e000ed00 	.word	0xe000ed00

08009ab8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009abc:	f7f6 fd66 	bl	800058c <SystemClock_Config>
}
 8009ac0:	bf00      	nop
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d817      	bhi.n	8009b08 <USBD_Get_USB_Status+0x44>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USBD_Get_USB_Status+0x1c>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009af7 	.word	0x08009af7
 8009ae8:	08009afd 	.word	0x08009afd
 8009aec:	08009b03 	.word	0x08009b03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73fb      	strb	r3, [r7, #15]
    break;
 8009af4:	e00b      	b.n	8009b0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	73fb      	strb	r3, [r7, #15]
    break;
 8009afa:	e008      	b.n	8009b0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009afc:	2301      	movs	r3, #1
 8009afe:	73fb      	strb	r3, [r7, #15]
    break;
 8009b00:	e005      	b.n	8009b0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b02:	2303      	movs	r3, #3
 8009b04:	73fb      	strb	r3, [r7, #15]
    break;
 8009b06:	e002      	b.n	8009b0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0c:	bf00      	nop
  }
  return usb_status;
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <app_tick_1ms>:
	*adc_avg_ch1 = (uint16_t) sum_temp[0];
	*adc_avg_ch2 = (uint16_t) sum_temp[1];
}

void app_tick_1ms(void) // SysTick_Handler(void) -> stm32F7xx_it.c
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0

	//static uint32_t led_time_ctn_ms = 0;

	if (!app_started) // Espera inicializar o microcontrolador
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <app_tick_1ms+0x18>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f083 0301 	eor.w	r3, r3, #1
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
	 {
	 led_time_ctn_ms = 0;
	 hw_led_toggle();
	 }
	 */
}
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000221 	.word	0x20000221

08009b38 <app_switch_interrupt>:

void app_switch_interrupt(void) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
	static uint32_t deboucing_time_ms = 0;

	if (!app_started) // Espera inicializar o microcontrolador
 8009b3c:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <app_switch_interrupt+0x4c>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f083 0301 	eor.w	r3, r3, #1
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11a      	bne.n	8009b80 <app_switch_interrupt+0x48>
		return;

	if ((hw_tick_ms_get() - deboucing_time_ms) >= APP_DEBOUCING_TIME_MS) {
 8009b4a:	f000 fa39 	bl	8009fc0 <hw_tick_ms_get>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <app_switch_interrupt+0x50>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b31      	cmp	r3, #49	; 0x31
 8009b58:	d913      	bls.n	8009b82 <app_switch_interrupt+0x4a>
		if (led_time_ms == 400)
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <app_switch_interrupt+0x54>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b62:	d103      	bne.n	8009b6c <app_switch_interrupt+0x34>
			led_time_ms = 100;
 8009b64:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <app_switch_interrupt+0x54>)
 8009b66:	2264      	movs	r2, #100	; 0x64
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e003      	b.n	8009b74 <app_switch_interrupt+0x3c>
		else
			led_time_ms = 400;
 8009b6c:	4b07      	ldr	r3, [pc, #28]	; (8009b8c <app_switch_interrupt+0x54>)
 8009b6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b72:	601a      	str	r2, [r3, #0]

		deboucing_time_ms = hw_tick_ms_get();
 8009b74:	f000 fa24 	bl	8009fc0 <hw_tick_ms_get>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4a03      	ldr	r2, [pc, #12]	; (8009b88 <app_switch_interrupt+0x50>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	e000      	b.n	8009b82 <app_switch_interrupt+0x4a>
		return;
 8009b80:	bf00      	nop
	}
}
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20000221 	.word	0x20000221
 8009b88:	20000224 	.word	0x20000224
 8009b8c:	20000198 	.word	0x20000198

08009b90 <app_leitura_matriz_FFC5>:
 * [	00, 01, 02, 03,
 * 		04, 05, 06, 07,
 * 		08, 09, 10, 11,
 * 		12, 13, 14, 15	]
 */
void app_leitura_matriz_FFC5(uint16_t *adc_read_ffc5) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08c      	sub	sp, #48	; 0x30
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	uint16_t _adc_read_ffc5 [ADC_CHANNEL_N] = {0};
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fc03 	bl	800a3ac <memset>
	uint8_t posicao_matriz = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (uint8_t i = 0; i < 4; i++) {
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009bb2:	e02f      	b.n	8009c14 <app_leitura_matriz_FFC5+0x84>
		//Verifica valor das colunas
		hw_get_pins_col_FFC5(i);
 8009bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fa39 	bl	800a030 <hw_get_pins_col_FFC5>

		//Alterna o estado dos pinos das linhas
		for (uint8_t j = 0; j < 4; j++) {
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009bc4:	e01d      	b.n	8009c02 <app_leitura_matriz_FFC5+0x72>
			// Coloca valores do ADC no vetor
			_adc_read_ffc5[posicao_matriz] = ADC_SET_0 - hw_set_pins_row_FFC5(j); // Retira o valor base para o sinal ficar crescente
 8009bc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fa1e 	bl	800a00c <hw_set_pins_row_FFC5>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009bd8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009bdc:	1a5b      	subs	r3, r3, r1
 8009bde:	b299      	uxth	r1, r3
 8009be0:	0053      	lsls	r3, r2, #1
 8009be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009be6:	4413      	add	r3, r2
 8009be8:	460a      	mov	r2, r1
 8009bea:	f823 2c24 	strh.w	r2, [r3, #-36]
			posicao_matriz++;
 8009bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (uint8_t j = 0; j < 4; j++) {
 8009bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d9dd      	bls.n	8009bc6 <app_leitura_matriz_FFC5+0x36>
	for (uint8_t i = 0; i < 4; i++) {
 8009c0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c0e:	3301      	adds	r3, #1
 8009c10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009c14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d9cb      	bls.n	8009bb4 <app_leitura_matriz_FFC5+0x24>
		}
	}
	adc_read_ffc5 = _adc_read_ffc5;
 8009c1c:	f107 030c 	add.w	r3, r7, #12
 8009c20:	607b      	str	r3, [r7, #4]
}
 8009c22:	bf00      	nop
 8009c24:	3730      	adds	r7, #48	; 0x30
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <app_output_ode_data>:
	    }
*/
}

void app_output_ode_data(void)//uint16_t _input_currents)//[])
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
	// Essas são as correntes de entrada dos neurônios. O conversor AD deve preencher essas correntes.
	//ode_data_type input_currents[N_NEURONS]; // = _input_currents;
	app_leitura_matriz_FFC5(input_currents);
 8009c32:	480b      	ldr	r0, [pc, #44]	; (8009c60 <app_output_ode_data+0x34>)
 8009c34:	f7ff ffac 	bl	8009b90 <app_leitura_matriz_FFC5>
	ode_data_type output = process_neuron_set_step(izhikevich_neurons, alpha_neurons, input_currents, N_NEURONS, 1.0f);
 8009c38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <app_output_ode_data+0x34>)
 8009c40:	4908      	ldr	r1, [pc, #32]	; (8009c64 <app_output_ode_data+0x38>)
 8009c42:	4809      	ldr	r0, [pc, #36]	; (8009c68 <app_output_ode_data+0x3c>)
 8009c44:	f000 fb3c 	bl	800a2c0 <process_neuron_set_step>
 8009c48:	ed87 0a01 	vstr	s0, [r7, #4]
	ode_data_type SA_I = izhikevich_neurons[1]->y[0];  // Saída do 2 neuronio (v)
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <app_output_ode_data+0x3c>)
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	603b      	str	r3, [r7, #0]
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200014e8 	.word	0x200014e8
 8009c64:	20001528 	.word	0x20001528
 8009c68:	200014a8 	.word	0x200014a8

08009c6c <bebionic_process_commands>:
}

//function that reads commands received via USB and decides which action should
//be performed
uint8_t bebionic_process_commands(uint8_t *Buf)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	//check if first byte of the packet is the ST byte
	if(Buf[0] == PKG_ST && Buf[PKG_SIZE-1] == PKG_ET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b24      	cmp	r3, #36	; 0x24
 8009c7a:	d157      	bne.n	8009d2c <bebionic_process_commands+0xc0>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3305      	adds	r3, #5
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b21      	cmp	r3, #33	; 0x21
 8009c84:	d152      	bne.n	8009d2c <bebionic_process_commands+0xc0>
	{
		uint16_t duration = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	81fb      	strh	r3, [r7, #14]
		//first data byte: open, close or stop
		if(Buf[2] == BEBIONIC_OPENING) //open the hand
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d110      	bne.n	8009cb6 <bebionic_process_commands+0x4a>
		{
			//second data byte: duration in ms (MSB)
			//third data byte: duration in ms (LSB)
			duration = Buf[3] << 8 | Buf[4];
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3303      	adds	r3, #3
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	b21a      	sxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b21b      	sxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	81fb      	strh	r3, [r7, #14]
			//call the function to open the hand
		    bebionic_th_open_hand(duration);
 8009cac:	89fb      	ldrh	r3, [r7, #14]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f84c 	bl	8009d4c <bebionic_th_open_hand>
 8009cb4:	e029      	b.n	8009d0a <bebionic_process_commands+0x9e>
		}
		else if(Buf[2] == BEBIONIC_CLOSING) //close the hand
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3302      	adds	r3, #2
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d110      	bne.n	8009ce2 <bebionic_process_commands+0x76>
		{
			//second data byte: duration in ms (MSB)
			//third data byte: duration in ms (LSB)
			duration = Buf[3] << 8 | Buf[4];
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3303      	adds	r3, #3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	b21a      	sxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b21b      	sxth	r3, r3
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	b21b      	sxth	r3, r3
 8009cd6:	81fb      	strh	r3, [r7, #14]
			//call the function to close the hand
			bebionic_th_close_hand(duration);
 8009cd8:	89fb      	ldrh	r3, [r7, #14]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f86e 	bl	8009dbc <bebionic_th_close_hand>
 8009ce0:	e013      	b.n	8009d0a <bebionic_process_commands+0x9e>
		}
		else if(Buf[2] == BEBIONIC_STOP) //stops the BeBionic from moving
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3302      	adds	r3, #2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d10e      	bne.n	8009d0a <bebionic_process_commands+0x9e>
		{
			//set both control pins to zero
			HAL_GPIO_WritePin(GPIOD, BB_ChA_Pin|BB_ChB_Pin, GPIO_PIN_RESET);
 8009cec:	2200      	movs	r2, #0
 8009cee:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8009cf2:	4811      	ldr	r0, [pc, #68]	; (8009d38 <bebionic_process_commands+0xcc>)
 8009cf4:	f7f8 f92e 	bl	8001f54 <HAL_GPIO_WritePin>
			//reset state to IDLE
			BEBIONIC_STATE = BEBIONIC_IDLE;
 8009cf8:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <bebionic_process_commands+0xd0>)
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	701a      	strb	r2, [r3, #0]
			timer_counter = 0; //resets the timer counter
 8009cfe:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <bebionic_process_commands+0xd4>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	801a      	strh	r2, [r3, #0]
			BEBIONIC_cmd_running = 0; //bebionic completed action
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <bebionic_process_commands+0xd8>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]


		//check the state of the hand
		//if the hand is not idle, i.e. it is moving
		//then decide whether the timer has to be started or not
		if(BEBIONIC_STATE != BEBIONIC_IDLE)
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <bebionic_process_commands+0xd0>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d00a      	beq.n	8009d28 <bebionic_process_commands+0xbc>
		{
			//if another command is not being processed, then
			//start the timer
			if(BEBIONIC_cmd_running == 0)
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <bebionic_process_commands+0xd8>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <bebionic_process_commands+0xbc>
			{
				HAL_TIM_Base_Start_IT(&htim2); //start the timer
 8009d1c:	480a      	ldr	r0, [pc, #40]	; (8009d48 <bebionic_process_commands+0xdc>)
 8009d1e:	f7fa fcfd 	bl	800471c <HAL_TIM_Base_Start_IT>
				BEBIONIC_cmd_running = 1; //set the command flag
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <bebionic_process_commands+0xd8>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	701a      	strb	r2, [r3, #0]

			//turn the LED on
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		}

		return PKG_OK; //return successful operation
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <bebionic_process_commands+0xc2>
	}
	else //package not recognized
		return PKG_ERROR; //return false
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40020c00 	.word	0x40020c00
 8009d3c:	20000244 	.word	0x20000244
 8009d40:	20000228 	.word	0x20000228
 8009d44:	2000022a 	.word	0x2000022a
 8009d48:	20000370 	.word	0x20000370

08009d4c <bebionic_th_open_hand>:

//function to open the hand
uint8_t bebionic_th_open_hand(uint16_t duration)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	80fb      	strh	r3, [r7, #6]
	if(BEBIONIC_STATE == BEBIONIC_CLOSING) //stop from closing
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <bebionic_th_open_hand+0x5c>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10e      	bne.n	8009d7c <bebionic_th_open_hand+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, BB_ChB_Pin, GPIO_PIN_RESET);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d64:	4811      	ldr	r0, [pc, #68]	; (8009dac <bebionic_th_open_hand+0x60>)
 8009d66:	f7f8 f8f5 	bl	8001f54 <HAL_GPIO_WritePin>
		//stop the timer
		HAL_TIM_Base_Stop_IT(&htim2);
 8009d6a:	4811      	ldr	r0, [pc, #68]	; (8009db0 <bebionic_th_open_hand+0x64>)
 8009d6c:	f7fa fd4e 	bl	800480c <HAL_TIM_Base_Stop_IT>
		//reset the command flag
		BEBIONIC_cmd_running = 0;
 8009d70:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <bebionic_th_open_hand+0x68>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
		//resets the timer counter
		timer_counter = 0;
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <bebionic_th_open_hand+0x6c>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	801a      	strh	r2, [r3, #0]
	}

	//Change BeBionic state to "Opening"
	BEBIONIC_STATE = BEBIONIC_OPENING;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <bebionic_th_open_hand+0x5c>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
	//Set the output in to high: Threshold control
	HAL_GPIO_WritePin(GPIOD, BB_ChA_Pin, GPIO_PIN_SET);
 8009d82:	2201      	movs	r2, #1
 8009d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d88:	4808      	ldr	r0, [pc, #32]	; (8009dac <bebionic_th_open_hand+0x60>)
 8009d8a:	f7f8 f8e3 	bl	8001f54 <HAL_GPIO_WritePin>
	//increment the time duration of the action
	timer_counter += duration;
 8009d8e:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <bebionic_th_open_hand+0x6c>)
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	4413      	add	r3, r2
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	4b07      	ldr	r3, [pc, #28]	; (8009db8 <bebionic_th_open_hand+0x6c>)
 8009d9c:	801a      	strh	r2, [r3, #0]

	return BEBIONIC_OK;
 8009d9e:	2320      	movs	r3, #32
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20000244 	.word	0x20000244
 8009dac:	40020c00 	.word	0x40020c00
 8009db0:	20000370 	.word	0x20000370
 8009db4:	2000022a 	.word	0x2000022a
 8009db8:	20000228 	.word	0x20000228

08009dbc <bebionic_th_close_hand>:

//function to close the hand according to selected grip
uint8_t bebionic_th_close_hand(uint16_t duration)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	80fb      	strh	r3, [r7, #6]
	if(BEBIONIC_STATE == BEBIONIC_OPENING) //stop from opening
 8009dc6:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <bebionic_th_close_hand+0x5c>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d10e      	bne.n	8009dec <bebionic_th_close_hand+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, BB_ChA_Pin, GPIO_PIN_RESET);
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009dd4:	4811      	ldr	r0, [pc, #68]	; (8009e1c <bebionic_th_close_hand+0x60>)
 8009dd6:	f7f8 f8bd 	bl	8001f54 <HAL_GPIO_WritePin>
		//stop the timer
		HAL_TIM_Base_Stop_IT(&htim2);
 8009dda:	4811      	ldr	r0, [pc, #68]	; (8009e20 <bebionic_th_close_hand+0x64>)
 8009ddc:	f7fa fd16 	bl	800480c <HAL_TIM_Base_Stop_IT>
		//reset the command flag
		BEBIONIC_cmd_running = 0;
 8009de0:	4b10      	ldr	r3, [pc, #64]	; (8009e24 <bebionic_th_close_hand+0x68>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
		//resets the timer counter
		timer_counter = 0;
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <bebionic_th_close_hand+0x6c>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	801a      	strh	r2, [r3, #0]
	}

	//Change BeBionic state to "Closing"
	BEBIONIC_STATE = BEBIONIC_CLOSING;
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <bebionic_th_close_hand+0x5c>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	701a      	strb	r2, [r3, #0]
	//Set the output in to high: Threshold control
	HAL_GPIO_WritePin(GPIOD, BB_ChB_Pin, GPIO_PIN_SET);
 8009df2:	2201      	movs	r2, #1
 8009df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009df8:	4808      	ldr	r0, [pc, #32]	; (8009e1c <bebionic_th_close_hand+0x60>)
 8009dfa:	f7f8 f8ab 	bl	8001f54 <HAL_GPIO_WritePin>
	//increment the time duration of the action
	timer_counter += duration;
 8009dfe:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <bebionic_th_close_hand+0x6c>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	4413      	add	r3, r2
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <bebionic_th_close_hand+0x6c>)
 8009e0c:	801a      	strh	r2, [r3, #0]

	return BEBIONIC_OK;
 8009e0e:	2320      	movs	r3, #32
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000244 	.word	0x20000244
 8009e1c:	40020c00 	.word	0x40020c00
 8009e20:	20000370 	.word	0x20000370
 8009e24:	2000022a 	.word	0x2000022a
 8009e28:	20000228 	.word	0x20000228

08009e2c <hw_Select_ch1>:
void hw_adc_start(void) {
	HAL_ADC_Start(&hadc1);
	//HAL_ADC_Start_IT(&hadc1); // Se for por timer
}

void hw_Select_ch1(void) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8009e30:	4b08      	ldr	r3, [pc, #32]	; (8009e54 <hw_Select_ch1+0x28>)
 8009e32:	2203      	movs	r2, #3
 8009e34:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8009e36:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <hw_Select_ch1+0x28>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	605a      	str	r2, [r3, #4]
	//sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8009e3c:	4905      	ldr	r1, [pc, #20]	; (8009e54 <hw_Select_ch1+0x28>)
 8009e3e:	4806      	ldr	r0, [pc, #24]	; (8009e58 <hw_Select_ch1+0x2c>)
 8009e40:	f7f7 faf4 	bl	800142c <HAL_ADC_ConfigChannel>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <hw_Select_ch1+0x22>
		Error_Handler();
 8009e4a:	f7f6 fe95 	bl	8000b78 <Error_Handler>
	}
}
 8009e4e:	bf00      	nop
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	2000022c 	.word	0x2000022c
 8009e58:	200002dc 	.word	0x200002dc

08009e5c <hw_Select_ch2>:

void hw_Select_ch2(void) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_7;
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <hw_Select_ch2+0x28>)
 8009e62:	2207      	movs	r2, #7
 8009e64:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8009e66:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <hw_Select_ch2+0x28>)
 8009e68:	2202      	movs	r2, #2
 8009e6a:	605a      	str	r2, [r3, #4]
	//sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8009e6c:	4905      	ldr	r1, [pc, #20]	; (8009e84 <hw_Select_ch2+0x28>)
 8009e6e:	4806      	ldr	r0, [pc, #24]	; (8009e88 <hw_Select_ch2+0x2c>)
 8009e70:	f7f7 fadc 	bl	800142c <HAL_ADC_ConfigChannel>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <hw_Select_ch2+0x22>
		Error_Handler();
 8009e7a:	f7f6 fe7d 	bl	8000b78 <Error_Handler>
	}
}
 8009e7e:	bf00      	nop
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	2000022c 	.word	0x2000022c
 8009e88:	200002dc 	.word	0x200002dc

08009e8c <hw_Select_ch3>:

void hw_Select_ch3(void) {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 8009e90:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <hw_Select_ch3+0x28>)
 8009e92:	220a      	movs	r2, #10
 8009e94:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8009e96:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <hw_Select_ch3+0x28>)
 8009e98:	2203      	movs	r2, #3
 8009e9a:	605a      	str	r2, [r3, #4]
	//sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8009e9c:	4905      	ldr	r1, [pc, #20]	; (8009eb4 <hw_Select_ch3+0x28>)
 8009e9e:	4806      	ldr	r0, [pc, #24]	; (8009eb8 <hw_Select_ch3+0x2c>)
 8009ea0:	f7f7 fac4 	bl	800142c <HAL_ADC_ConfigChannel>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <hw_Select_ch3+0x22>
		Error_Handler();
 8009eaa:	f7f6 fe65 	bl	8000b78 <Error_Handler>
	}
}
 8009eae:	bf00      	nop
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	2000022c 	.word	0x2000022c
 8009eb8:	200002dc 	.word	0x200002dc

08009ebc <hw_Select_ch4>:

void hw_Select_ch4(void) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_13;
 8009ec0:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <hw_Select_ch4+0x28>)
 8009ec2:	220d      	movs	r2, #13
 8009ec4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <hw_Select_ch4+0x28>)
 8009ec8:	2204      	movs	r2, #4
 8009eca:	605a      	str	r2, [r3, #4]
	//sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8009ecc:	4905      	ldr	r1, [pc, #20]	; (8009ee4 <hw_Select_ch4+0x28>)
 8009ece:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <hw_Select_ch4+0x2c>)
 8009ed0:	f7f7 faac 	bl	800142c <HAL_ADC_ConfigChannel>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <hw_Select_ch4+0x22>
		Error_Handler();
 8009eda:	f7f6 fe4d 	bl	8000b78 <Error_Handler>
	}
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	2000022c 	.word	0x2000022c
 8009ee8:	200002dc 	.word	0x200002dc

08009eec <hw_adc_read_single>:
void hw_adc_calibration(void) {
	// Essa familia (STM32F7) não possue essa função de auto calibração
	//HAL_ADCEx_Calibration_Start(&hadc1);
}

void hw_adc_read_single(uint8_t _channel, uint16_t *adc_val) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]

	switch (_channel) {
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d85a      	bhi.n	8009fb4 <hw_adc_read_single+0xc8>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <hw_adc_read_single+0x18>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f15 	.word	0x08009f15
 8009f08:	08009f3d 	.word	0x08009f3d
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f8d 	.word	0x08009f8d
	case 0:
		hw_Select_ch1();
 8009f14:	f7ff ff8a 	bl	8009e2c <hw_Select_ch1>
		HAL_ADC_Start(&hadc1);
 8009f18:	4828      	ldr	r0, [pc, #160]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f1a:	f7f7 f8ed 	bl	80010f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8009f1e:	2164      	movs	r1, #100	; 0x64
 8009f20:	4826      	ldr	r0, [pc, #152]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f22:	f7f7 f9eb 	bl	80012fc <HAL_ADC_PollForConversion>
		*adc_val = HAL_ADC_GetValue(&hadc1);
 8009f26:	4825      	ldr	r0, [pc, #148]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f28:	f7f7 fa73 	bl	8001412 <HAL_ADC_GetValue>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8009f34:	4821      	ldr	r0, [pc, #132]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f36:	f7f7 f9ad 	bl	8001294 <HAL_ADC_Stop>
		break;
 8009f3a:	e03b      	b.n	8009fb4 <hw_adc_read_single+0xc8>
	case 1:
		hw_Select_ch2();
 8009f3c:	f7ff ff8e 	bl	8009e5c <hw_Select_ch2>
		HAL_ADC_Start(&hadc1);
 8009f40:	481e      	ldr	r0, [pc, #120]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f42:	f7f7 f8d9 	bl	80010f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8009f46:	2164      	movs	r1, #100	; 0x64
 8009f48:	481c      	ldr	r0, [pc, #112]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f4a:	f7f7 f9d7 	bl	80012fc <HAL_ADC_PollForConversion>
		*adc_val = HAL_ADC_GetValue(&hadc1);
 8009f4e:	481b      	ldr	r0, [pc, #108]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f50:	f7f7 fa5f 	bl	8001412 <HAL_ADC_GetValue>
 8009f54:	4603      	mov	r3, r0
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8009f5c:	4817      	ldr	r0, [pc, #92]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f5e:	f7f7 f999 	bl	8001294 <HAL_ADC_Stop>
		break;
 8009f62:	e027      	b.n	8009fb4 <hw_adc_read_single+0xc8>
	case 2:
		hw_Select_ch3();
 8009f64:	f7ff ff92 	bl	8009e8c <hw_Select_ch3>
		HAL_ADC_Start(&hadc1);
 8009f68:	4814      	ldr	r0, [pc, #80]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f6a:	f7f7 f8c5 	bl	80010f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8009f6e:	2164      	movs	r1, #100	; 0x64
 8009f70:	4812      	ldr	r0, [pc, #72]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f72:	f7f7 f9c3 	bl	80012fc <HAL_ADC_PollForConversion>
		*adc_val = HAL_ADC_GetValue(&hadc1);
 8009f76:	4811      	ldr	r0, [pc, #68]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f78:	f7f7 fa4b 	bl	8001412 <HAL_ADC_GetValue>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8009f84:	480d      	ldr	r0, [pc, #52]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f86:	f7f7 f985 	bl	8001294 <HAL_ADC_Stop>
		break;
 8009f8a:	e013      	b.n	8009fb4 <hw_adc_read_single+0xc8>
	case 3:
		hw_Select_ch4();
 8009f8c:	f7ff ff96 	bl	8009ebc <hw_Select_ch4>
		HAL_ADC_Start(&hadc1);
 8009f90:	480a      	ldr	r0, [pc, #40]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f92:	f7f7 f8b1 	bl	80010f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8009f96:	2164      	movs	r1, #100	; 0x64
 8009f98:	4808      	ldr	r0, [pc, #32]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009f9a:	f7f7 f9af 	bl	80012fc <HAL_ADC_PollForConversion>
		*adc_val = HAL_ADC_GetValue(&hadc1);
 8009f9e:	4807      	ldr	r0, [pc, #28]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009fa0:	f7f7 fa37 	bl	8001412 <HAL_ADC_GetValue>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8009fac:	4803      	ldr	r0, [pc, #12]	; (8009fbc <hw_adc_read_single+0xd0>)
 8009fae:	f7f7 f971 	bl	8001294 <HAL_ADC_Stop>
		break;
 8009fb2:	bf00      	nop
	 } else if (adc_hal_status != HAL_OK) {
	 return false;
	 }
	 }
	 */
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	200002dc 	.word	0x200002dc

08009fc0 <hw_tick_ms_get>:

uint32_t hw_tick_ms_get(void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8009fc4:	f7f7 f824 	bl	8001010 <HAL_GetTick>
 8009fc8:	4603      	mov	r3, r0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_GPIO_EXTI_Callback>:
	 HAL_ResumeTick();
	 */
	__WFI(); // Recurso do cortex para econômia de energia e acorda quando acontece interrupção
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8009fd8:	88fb      	ldrh	r3, [r7, #6]
 8009fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fde:	d101      	bne.n	8009fe4 <HAL_GPIO_EXTI_Callback+0x16>
		app_switch_interrupt();
 8009fe0:	f7ff fdaa 	bl	8009b38 <app_switch_interrupt>
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_TIM_PeriodElapsedCallback>:

void hw_timer_stop(void) {
	HAL_TIM_Base_Stop_IT(&htim1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a04      	ldr	r2, [pc, #16]	; (800a008 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d101      	bne.n	800a000 <HAL_TIM_PeriodElapsedCallback+0x14>
		/*
		uint16_t adc_read_ffc5[16] = {0};
		app_leitura_matriz_FFC5(adc_read_ffc5);
		uint16_t result_average_FFC5 = app_average_matriz(adc_read_ffc5);
*/
		app_output_ode_data();//result_average_FFC5);//adc_read_ffc5);
 8009ffc:	f7ff fe16 	bl	8009c2c <app_output_ode_data>
	}
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000324 	.word	0x20000324

0800a00c <hw_set_pins_row_FFC5>:
 * L1:	PA_3 (ADC1/3)
 * L2:	PC_0 (ADC1/10)
 * L3:	PC_3 (ADC1/13)
 * L4:	PA_7 (ADC1/7)
 */
uint16_t hw_set_pins_row_FFC5(uint8_t _pin) {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_point_FFC5;

	hw_adc_read_single(_pin, &adc_point_FFC5);
 800a016:	f107 020e 	add.w	r2, r7, #14
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff ff64 	bl	8009eec <hw_adc_read_single>

	return adc_point_FFC5;
 800a024:	89fb      	ldrh	r3, [r7, #14]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <hw_get_pins_col_FFC5>:

/** Pinos usados na conexão Nucleo F7 e uC (COLUNAS)
 * COL1		COL2	COL3	COL4
 * PF_13	PE_9	PE_11	PF_14
 */
void hw_get_pins_col_FFC5(uint8_t _pin) {
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
	// Inicia todos os pinos desligados
	HAL_GPIO_WritePin(FFC5_C1_GPIO_Port, FFC5_C1_Pin, GPIO_PIN_SET);
 800a03a:	2201      	movs	r2, #1
 800a03c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a040:	4821      	ldr	r0, [pc, #132]	; (800a0c8 <hw_get_pins_col_FFC5+0x98>)
 800a042:	f7f7 ff87 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FFC5_C2_GPIO_Port, FFC5_C1_Pin, GPIO_PIN_SET);
 800a046:	2201      	movs	r2, #1
 800a048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a04c:	481f      	ldr	r0, [pc, #124]	; (800a0cc <hw_get_pins_col_FFC5+0x9c>)
 800a04e:	f7f7 ff81 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FFC5_C3_GPIO_Port, FFC5_C1_Pin, GPIO_PIN_SET);
 800a052:	2201      	movs	r2, #1
 800a054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a058:	481c      	ldr	r0, [pc, #112]	; (800a0cc <hw_get_pins_col_FFC5+0x9c>)
 800a05a:	f7f7 ff7b 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FFC5_C4_GPIO_Port, FFC5_C1_Pin, GPIO_PIN_SET);
 800a05e:	2201      	movs	r2, #1
 800a060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a064:	4818      	ldr	r0, [pc, #96]	; (800a0c8 <hw_get_pins_col_FFC5+0x98>)
 800a066:	f7f7 ff75 	bl	8001f54 <HAL_GPIO_WritePin>
	// Seleciona coluna
	switch (_pin) {
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d827      	bhi.n	800a0c0 <hw_get_pins_col_FFC5+0x90>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <hw_get_pins_col_FFC5+0x48>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a089 	.word	0x0800a089
 800a07c:	0800a097 	.word	0x0800a097
 800a080:	0800a0a5 	.word	0x0800a0a5
 800a084:	0800a0b3 	.word	0x0800a0b3
	case 0:
		HAL_GPIO_WritePin(FFC5_C1_GPIO_Port, FFC5_C1_Pin, GPIO_PIN_RESET);
 800a088:	2200      	movs	r2, #0
 800a08a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a08e:	480e      	ldr	r0, [pc, #56]	; (800a0c8 <hw_get_pins_col_FFC5+0x98>)
 800a090:	f7f7 ff60 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 800a094:	e014      	b.n	800a0c0 <hw_get_pins_col_FFC5+0x90>
	case 1:
		HAL_GPIO_WritePin(FFC5_C2_GPIO_Port, FFC5_C2_Pin, GPIO_PIN_RESET);
 800a096:	2200      	movs	r2, #0
 800a098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a09c:	480b      	ldr	r0, [pc, #44]	; (800a0cc <hw_get_pins_col_FFC5+0x9c>)
 800a09e:	f7f7 ff59 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 800a0a2:	e00d      	b.n	800a0c0 <hw_get_pins_col_FFC5+0x90>
	case 2:
		HAL_GPIO_WritePin(FFC5_C3_GPIO_Port, FFC5_C3_Pin, GPIO_PIN_RESET);
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a0aa:	4808      	ldr	r0, [pc, #32]	; (800a0cc <hw_get_pins_col_FFC5+0x9c>)
 800a0ac:	f7f7 ff52 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 800a0b0:	e006      	b.n	800a0c0 <hw_get_pins_col_FFC5+0x90>
	case 3:
		HAL_GPIO_WritePin(FFC5_C4_GPIO_Port, FFC5_C4_Pin, GPIO_PIN_RESET);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0b8:	4803      	ldr	r0, [pc, #12]	; (800a0c8 <hw_get_pins_col_FFC5+0x98>)
 800a0ba:	f7f7 ff4b 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 800a0be:	bf00      	nop
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	40021400 	.word	0x40021400
 800a0cc:	40021000 	.word	0x40021000

0800a0d0 <ode1_step>:
{
    return (y == NULL) | (df == NULL) | (params == NULL);
}

ode_status_t ode1_step(t_ode_system *const model, const ode_data_type h)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08c      	sub	sp, #48	; 0x30
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	ed87 0a00 	vstr	s0, [r7]

    // Verificação das entradas, pode ser desabilitada definindo a macro
    // ODE_UNSAFE_MODE para melhor desempenho
#ifndef ODE_UNSAFE_MODE
    if (unlikely(model == NULL))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bf0c      	ite	eq
 800a0e2:	2301      	moveq	r3, #1
 800a0e4:	2300      	movne	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <ode1_step+0x20>
        return ODE_INVALID_PARAMETER;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e03f      	b.n	800a170 <ode1_step+0xa0>
    ode_data_type dy[MAX_EQUATIONS];

    //typedef int (*diffFunction)(
    //           ode_data_type t, const ode_data_type y[], ode_data_type df[],
    //           void *params);  // Declare typedef
    model->model_function(model->t, model->y, dy, model->model_params);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	edd2 7a04 	vldr	s15, [r2, #16]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68d0      	ldr	r0, [r2, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6892      	ldr	r2, [r2, #8]
 800a102:	f107 010c 	add.w	r1, r7, #12
 800a106:	eeb0 0a67 	vmov.f32	s0, s15
 800a10a:	4798      	blx	r3

    for (unsigned int i = 0; i < model->num_equations; i++)
 800a10c:	2300      	movs	r3, #0
 800a10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a110:	e01e      	b.n	800a150 <ode1_step+0x80>
    {
        model->y[i] = model->y[i] + h * dy[i];
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	ed93 7a00 	vldr	s14, [r3]
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a128:	4413      	add	r3, r2
 800a12a:	3b24      	subs	r3, #36	; 0x24
 800a12c:	edd3 6a00 	vldr	s13, [r3]
 800a130:	edd7 7a00 	vldr	s15, [r7]
 800a134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a146:	edc3 7a00 	vstr	s15, [r3]
    for (unsigned int i = 0; i < model->num_equations; i++)
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	3301      	adds	r3, #1
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a156:	429a      	cmp	r2, r3
 800a158:	d3db      	bcc.n	800a112 <ode1_step+0x42>
    }

    model->t = model->t + h;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	ed93 7a04 	vldr	s14, [r3, #16]
 800a160:	edd7 7a00 	vldr	s15, [r7]
 800a164:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	edc3 7a04 	vstr	s15, [r3, #16]
    //free(dy);

    return ODE_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3730      	adds	r7, #48	; 0x30
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <izhikevich_step>:
        free(system);
    }
}

ode_status_t izhikevich_step(t_ode_system *const model, const ode_data_type h)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	ed87 0a00 	vstr	s0, [r7]

    t_izhikevich_params *model_params =
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	60fb      	str	r3, [r7, #12]
        (t_izhikevich_params *)model->model_params;
    //Reset
    if (unlikely(model->y[0] >= 30.0))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	edd3 7a00 	vldr	s15, [r3]
 800a192:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	bfac      	ite	ge
 800a1a0:	2301      	movge	r3, #1
 800a1a2:	2300      	movlt	r3, #0
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d017      	beq.n	800a1da <izhikevich_step+0x62>
    {
        model->y[0] = model_params->c;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	6892      	ldr	r2, [r2, #8]
 800a1b2:	601a      	str	r2, [r3, #0]
        model->y[1] = model->y[1] + model_params->d;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	ed93 7a00 	vldr	s14, [r3]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ce:	edc3 7a00 	vstr	s15, [r3]
        model_params->spike = 1;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	615a      	str	r2, [r3, #20]
 800a1d8:	e002      	b.n	800a1e0 <izhikevich_step+0x68>
    }
    else
    {
        model_params->spike = 0;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	615a      	str	r2, [r3, #20]
    }

    int status = ode1_step(model, h);
 800a1e0:	ed97 0a00 	vldr	s0, [r7]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff ff73 	bl	800a0d0 <ode1_step>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	60bb      	str	r3, [r7, #8]

    if (unlikely(model->y[0] >= 35))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	edd3 7a00 	vldr	s15, [r3]
 800a1f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a24c <izhikevich_step+0xd4>
 800a1fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	bfac      	ite	ge
 800a204:	2301      	movge	r3, #1
 800a206:	2300      	movlt	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <izhikevich_step+0x9e>
    {
        model->y[0] = 35;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <izhikevich_step+0xd8>)
 800a214:	601a      	str	r2, [r3, #0]
    // comportamento estranho, semelhante a um bug. Em alguns momentos, essa
    // tensão ficava muito negativa, e quando era elevada ao quadrado, o modelo
    // entrava em um estado que fica travado, oscilando. É preciso investigar
    // melhor o que está acontecendo.
#ifndef DISABLE_LOWER_LIMIT_IZICHEVICH
    if (unlikely(model->y[0] <= -100.0))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	edd3 7a00 	vldr	s15, [r3]
 800a21e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a254 <izhikevich_step+0xdc>
 800a222:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22a:	bf94      	ite	ls
 800a22c:	2301      	movls	r3, #1
 800a22e:	2300      	movhi	r3, #0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <izhikevich_step+0xc6>
    {
        model->y[0] = -100.0;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	4a07      	ldr	r2, [pc, #28]	; (800a258 <izhikevich_step+0xe0>)
 800a23c:	601a      	str	r2, [r3, #0]
    }
#endif

    return status;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	b2db      	uxtb	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	420c0000 	.word	0x420c0000
 800a250:	420c0000 	.word	0x420c0000
 800a254:	c2c80000 	.word	0xc2c80000
 800a258:	c2c80000 	.word	0xc2c80000

0800a25c <process_neuron_step>:

ode_data_type process_neuron_step(t_ode_system *izhikevich_neuron,
                                  t_ode_system *alphafunction,
                                  ode_data_type input_current,
                                  ode_data_type step)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	ed87 0a01 	vstr	s0, [r7, #4]
 800a26a:	edc7 0a00 	vstr	s1, [r7]
    t_izhikevich_params *izichevich_params =
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	617b      	str	r3, [r7, #20]
        (t_izhikevich_params *)izhikevich_neuron->model_params;

    izichevich_params->I = input_current;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]

    izhikevich_step(izhikevich_neuron, step);
 800a27a:	ed97 0a00 	vldr	s0, [r7]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff ff7a 	bl	800a178 <izhikevich_step>

    t_alpha_function_params *alpha_params =
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	613b      	str	r3, [r7, #16]
        (t_alpha_function_params *)alphafunction->model_params;

    alpha_params->I = izichevich_params->spike;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	ee07 3a90 	vmov	s15, r3
 800a292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	edc3 7a02 	vstr	s15, [r3, #8]

    ode1_step(alphafunction, 0.001);
 800a29c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a2bc <process_neuron_step+0x60>
 800a2a0:	68b8      	ldr	r0, [r7, #8]
 800a2a2:	f7ff ff15 	bl	800a0d0 <ode1_step>

    return alphafunction->y[0];
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	ee07 3a90 	vmov	s15, r3
}
 800a2b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	3a83126f 	.word	0x3a83126f

0800a2c0 <process_neuron_set_step>:
ode_data_type process_neuron_set_step(t_ode_system **izhikevich_neuron,
                                      t_ode_system **alphafunction,
                                      ode_data_type *input_currents,
                                      int n_neurons,
                                      ode_data_type step)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6178      	str	r0, [r7, #20]
 800a2c8:	6139      	str	r1, [r7, #16]
 800a2ca:	60fa      	str	r2, [r7, #12]
 800a2cc:	60bb      	str	r3, [r7, #8]
 800a2ce:	ed87 0a01 	vstr	s0, [r7, #4]
    ode_data_type response = 0;
 800a2d2:	f04f 0300 	mov.w	r3, #0
 800a2d6:	61fb      	str	r3, [r7, #28]

    for (int neuron_index = 0; neuron_index < n_neurons; neuron_index++)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e020      	b.n	800a320 <process_neuron_set_step+0x60>
    {
        response += process_neuron_step(izhikevich_neuron[neuron_index],
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	6818      	ldr	r0, [r3, #0]
                                        alphafunction[neuron_index],
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4413      	add	r3, r2
        response += process_neuron_step(izhikevich_neuron[neuron_index],
 800a2f0:	6819      	ldr	r1, [r3, #0]
                                        input_currents[neuron_index], step);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	4413      	add	r3, r2
        response += process_neuron_step(izhikevich_neuron[neuron_index],
 800a2fa:	edd3 7a00 	vldr	s15, [r3]
 800a2fe:	edd7 0a01 	vldr	s1, [r7, #4]
 800a302:	eeb0 0a67 	vmov.f32	s0, s15
 800a306:	f7ff ffa9 	bl	800a25c <process_neuron_step>
 800a30a:	eeb0 7a40 	vmov.f32	s14, s0
 800a30e:	edd7 7a07 	vldr	s15, [r7, #28]
 800a312:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a316:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int neuron_index = 0; neuron_index < n_neurons; neuron_index++)
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	3301      	adds	r3, #1
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	dbda      	blt.n	800a2de <process_neuron_set_step+0x1e>
    }

    return response;
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	ee07 3a90 	vmov	s15, r3
}
 800a32e:	eeb0 0a67 	vmov.f32	s0, s15
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <__errno>:
 800a338:	4b01      	ldr	r3, [pc, #4]	; (800a340 <__errno+0x8>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	2000019c 	.word	0x2000019c

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4d0d      	ldr	r5, [pc, #52]	; (800a37c <__libc_init_array+0x38>)
 800a348:	4c0d      	ldr	r4, [pc, #52]	; (800a380 <__libc_init_array+0x3c>)
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	2600      	movs	r6, #0
 800a350:	42a6      	cmp	r6, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	4d0b      	ldr	r5, [pc, #44]	; (800a384 <__libc_init_array+0x40>)
 800a356:	4c0c      	ldr	r4, [pc, #48]	; (800a388 <__libc_init_array+0x44>)
 800a358:	f000 f8f8 	bl	800a54c <_init>
 800a35c:	1b64      	subs	r4, r4, r5
 800a35e:	10a4      	asrs	r4, r4, #2
 800a360:	2600      	movs	r6, #0
 800a362:	42a6      	cmp	r6, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36c:	4798      	blx	r3
 800a36e:	3601      	adds	r6, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f855 3b04 	ldr.w	r3, [r5], #4
 800a376:	4798      	blx	r3
 800a378:	3601      	adds	r6, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800a5cc 	.word	0x0800a5cc
 800a380:	0800a5cc 	.word	0x0800a5cc
 800a384:	0800a5cc 	.word	0x0800a5cc
 800a388:	0800a5d0 	.word	0x0800a5d0

0800a38c <malloc>:
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <malloc+0xc>)
 800a38e:	4601      	mov	r1, r0
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f000 b863 	b.w	800a45c <_malloc_r>
 800a396:	bf00      	nop
 800a398:	2000019c 	.word	0x2000019c

0800a39c <free>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <free+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f000 b80b 	b.w	800a3bc <_free_r>
 800a3a6:	bf00      	nop
 800a3a8:	2000019c 	.word	0x2000019c

0800a3ac <memset>:
 800a3ac:	4402      	add	r2, r0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d100      	bne.n	800a3b6 <memset+0xa>
 800a3b4:	4770      	bx	lr
 800a3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ba:	e7f9      	b.n	800a3b0 <memset+0x4>

0800a3bc <_free_r>:
 800a3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	d048      	beq.n	800a454 <_free_r+0x98>
 800a3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c6:	9001      	str	r0, [sp, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a3ce:	bfb8      	it	lt
 800a3d0:	18e4      	addlt	r4, r4, r3
 800a3d2:	f000 f8ad 	bl	800a530 <__malloc_lock>
 800a3d6:	4a20      	ldr	r2, [pc, #128]	; (800a458 <_free_r+0x9c>)
 800a3d8:	9801      	ldr	r0, [sp, #4]
 800a3da:	6813      	ldr	r3, [r2, #0]
 800a3dc:	4615      	mov	r5, r2
 800a3de:	b933      	cbnz	r3, 800a3ee <_free_r+0x32>
 800a3e0:	6063      	str	r3, [r4, #4]
 800a3e2:	6014      	str	r4, [r2, #0]
 800a3e4:	b003      	add	sp, #12
 800a3e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3ea:	f000 b8a7 	b.w	800a53c <__malloc_unlock>
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	d90b      	bls.n	800a40a <_free_r+0x4e>
 800a3f2:	6821      	ldr	r1, [r4, #0]
 800a3f4:	1862      	adds	r2, r4, r1
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	bf04      	itt	eq
 800a3fa:	681a      	ldreq	r2, [r3, #0]
 800a3fc:	685b      	ldreq	r3, [r3, #4]
 800a3fe:	6063      	str	r3, [r4, #4]
 800a400:	bf04      	itt	eq
 800a402:	1852      	addeq	r2, r2, r1
 800a404:	6022      	streq	r2, [r4, #0]
 800a406:	602c      	str	r4, [r5, #0]
 800a408:	e7ec      	b.n	800a3e4 <_free_r+0x28>
 800a40a:	461a      	mov	r2, r3
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b10b      	cbz	r3, 800a414 <_free_r+0x58>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d9fa      	bls.n	800a40a <_free_r+0x4e>
 800a414:	6811      	ldr	r1, [r2, #0]
 800a416:	1855      	adds	r5, r2, r1
 800a418:	42a5      	cmp	r5, r4
 800a41a:	d10b      	bne.n	800a434 <_free_r+0x78>
 800a41c:	6824      	ldr	r4, [r4, #0]
 800a41e:	4421      	add	r1, r4
 800a420:	1854      	adds	r4, r2, r1
 800a422:	42a3      	cmp	r3, r4
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	d1dd      	bne.n	800a3e4 <_free_r+0x28>
 800a428:	681c      	ldr	r4, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	6053      	str	r3, [r2, #4]
 800a42e:	4421      	add	r1, r4
 800a430:	6011      	str	r1, [r2, #0]
 800a432:	e7d7      	b.n	800a3e4 <_free_r+0x28>
 800a434:	d902      	bls.n	800a43c <_free_r+0x80>
 800a436:	230c      	movs	r3, #12
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	e7d3      	b.n	800a3e4 <_free_r+0x28>
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	428b      	cmp	r3, r1
 800a442:	bf04      	itt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	6063      	str	r3, [r4, #4]
 800a44a:	bf04      	itt	eq
 800a44c:	1949      	addeq	r1, r1, r5
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	6054      	str	r4, [r2, #4]
 800a452:	e7c7      	b.n	800a3e4 <_free_r+0x28>
 800a454:	b003      	add	sp, #12
 800a456:	bd30      	pop	{r4, r5, pc}
 800a458:	2000023c 	.word	0x2000023c

0800a45c <_malloc_r>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	1ccd      	adds	r5, r1, #3
 800a460:	f025 0503 	bic.w	r5, r5, #3
 800a464:	3508      	adds	r5, #8
 800a466:	2d0c      	cmp	r5, #12
 800a468:	bf38      	it	cc
 800a46a:	250c      	movcc	r5, #12
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	4606      	mov	r6, r0
 800a470:	db01      	blt.n	800a476 <_malloc_r+0x1a>
 800a472:	42a9      	cmp	r1, r5
 800a474:	d903      	bls.n	800a47e <_malloc_r+0x22>
 800a476:	230c      	movs	r3, #12
 800a478:	6033      	str	r3, [r6, #0]
 800a47a:	2000      	movs	r0, #0
 800a47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47e:	f000 f857 	bl	800a530 <__malloc_lock>
 800a482:	4921      	ldr	r1, [pc, #132]	; (800a508 <_malloc_r+0xac>)
 800a484:	680a      	ldr	r2, [r1, #0]
 800a486:	4614      	mov	r4, r2
 800a488:	b99c      	cbnz	r4, 800a4b2 <_malloc_r+0x56>
 800a48a:	4f20      	ldr	r7, [pc, #128]	; (800a50c <_malloc_r+0xb0>)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	b923      	cbnz	r3, 800a49a <_malloc_r+0x3e>
 800a490:	4621      	mov	r1, r4
 800a492:	4630      	mov	r0, r6
 800a494:	f000 f83c 	bl	800a510 <_sbrk_r>
 800a498:	6038      	str	r0, [r7, #0]
 800a49a:	4629      	mov	r1, r5
 800a49c:	4630      	mov	r0, r6
 800a49e:	f000 f837 	bl	800a510 <_sbrk_r>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d123      	bne.n	800a4ee <_malloc_r+0x92>
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	6033      	str	r3, [r6, #0]
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f000 f846 	bl	800a53c <__malloc_unlock>
 800a4b0:	e7e3      	b.n	800a47a <_malloc_r+0x1e>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	1b5b      	subs	r3, r3, r5
 800a4b6:	d417      	bmi.n	800a4e8 <_malloc_r+0x8c>
 800a4b8:	2b0b      	cmp	r3, #11
 800a4ba:	d903      	bls.n	800a4c4 <_malloc_r+0x68>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	441c      	add	r4, r3
 800a4c0:	6025      	str	r5, [r4, #0]
 800a4c2:	e004      	b.n	800a4ce <_malloc_r+0x72>
 800a4c4:	6863      	ldr	r3, [r4, #4]
 800a4c6:	42a2      	cmp	r2, r4
 800a4c8:	bf0c      	ite	eq
 800a4ca:	600b      	streq	r3, [r1, #0]
 800a4cc:	6053      	strne	r3, [r2, #4]
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 f834 	bl	800a53c <__malloc_unlock>
 800a4d4:	f104 000b 	add.w	r0, r4, #11
 800a4d8:	1d23      	adds	r3, r4, #4
 800a4da:	f020 0007 	bic.w	r0, r0, #7
 800a4de:	1ac2      	subs	r2, r0, r3
 800a4e0:	d0cc      	beq.n	800a47c <_malloc_r+0x20>
 800a4e2:	1a1b      	subs	r3, r3, r0
 800a4e4:	50a3      	str	r3, [r4, r2]
 800a4e6:	e7c9      	b.n	800a47c <_malloc_r+0x20>
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	6864      	ldr	r4, [r4, #4]
 800a4ec:	e7cc      	b.n	800a488 <_malloc_r+0x2c>
 800a4ee:	1cc4      	adds	r4, r0, #3
 800a4f0:	f024 0403 	bic.w	r4, r4, #3
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d0e3      	beq.n	800a4c0 <_malloc_r+0x64>
 800a4f8:	1a21      	subs	r1, r4, r0
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f808 	bl	800a510 <_sbrk_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d1dd      	bne.n	800a4c0 <_malloc_r+0x64>
 800a504:	e7cf      	b.n	800a4a6 <_malloc_r+0x4a>
 800a506:	bf00      	nop
 800a508:	2000023c 	.word	0x2000023c
 800a50c:	20000240 	.word	0x20000240

0800a510 <_sbrk_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d06      	ldr	r5, [pc, #24]	; (800a52c <_sbrk_r+0x1c>)
 800a514:	2300      	movs	r3, #0
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	f7f6 fcb6 	bl	8000e8c <_sbrk>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_sbrk_r+0x1a>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_sbrk_r+0x1a>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20001568 	.word	0x20001568

0800a530 <__malloc_lock>:
 800a530:	4801      	ldr	r0, [pc, #4]	; (800a538 <__malloc_lock+0x8>)
 800a532:	f000 b809 	b.w	800a548 <__retarget_lock_acquire_recursive>
 800a536:	bf00      	nop
 800a538:	20001570 	.word	0x20001570

0800a53c <__malloc_unlock>:
 800a53c:	4801      	ldr	r0, [pc, #4]	; (800a544 <__malloc_unlock+0x8>)
 800a53e:	f000 b804 	b.w	800a54a <__retarget_lock_release_recursive>
 800a542:	bf00      	nop
 800a544:	20001570 	.word	0x20001570

0800a548 <__retarget_lock_acquire_recursive>:
 800a548:	4770      	bx	lr

0800a54a <__retarget_lock_release_recursive>:
 800a54a:	4770      	bx	lr

0800a54c <_init>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	bf00      	nop
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr

0800a558 <_fini>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	bf00      	nop
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr
